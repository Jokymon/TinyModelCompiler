#include "opc_ua_nodeset2.h"
#include "ua_model.h"

void populate_node_list(std::map<std::string, ua_node_ptr> &nodes)
{
    nodes["DefaultBinary"] = std::make_shared<ua_object>(ua_node_id(0, 3062), qualified_name("Default Binary"), "DefaultBinary");
    nodes["DefaultXml"] = std::make_shared<ua_object>(ua_node_id(0, 3063), qualified_name("Default XML"), "DefaultXml");
    nodes["BaseObjectType"] = std::make_shared<ua_object_type>(ua_node_id(0, 58), qualified_name("BaseObjectType"), "");
    nodes["FolderType"] = std::make_shared<ua_object_type>(ua_node_id(0, 61), qualified_name("FolderType"), "");
    nodes["BaseVariableType"] = std::make_shared<ua_variable_type>(ua_node_id(0, 62), qualified_name("BaseVariableType"), "");
    nodes["BaseDataVariableType"] = std::make_shared<ua_variable_type>(ua_node_id(0, 63), qualified_name("BaseDataVariableType"), "");
    nodes["PropertyType"] = std::make_shared<ua_variable_type>(ua_node_id(0, 68), qualified_name("PropertyType"), "");
    nodes["DataTypeDescriptionType"] = std::make_shared<ua_variable_type>(ua_node_id(0, 69), qualified_name("DataTypeDescriptionType"), "");
    nodes["DataTypeDictionaryType"] = std::make_shared<ua_variable_type>(ua_node_id(0, 72), qualified_name("DataTypeDictionaryType"), "");
    nodes["DataTypeSystemType"] = std::make_shared<ua_object_type>(ua_node_id(0, 75), qualified_name("DataTypeSystemType"), "");
    nodes["DataTypeEncodingType"] = std::make_shared<ua_object_type>(ua_node_id(0, 76), qualified_name("DataTypeEncodingType"), "");
    nodes["ModellingRuleType"] = std::make_shared<ua_object_type>(ua_node_id(0, 77), qualified_name("ModellingRuleType"), "");
    nodes["ModellingRule_Mandatory"] = std::make_shared<ua_object>(ua_node_id(0, 78), qualified_name("Mandatory"), "ModellingRule_Mandatory");
    nodes["ModellingRule_Optional"] = std::make_shared<ua_object>(ua_node_id(0, 80), qualified_name("Optional"), "ModellingRule_Optional");
    nodes["ModellingRule_ExposesItsArray"] = std::make_shared<ua_object>(ua_node_id(0, 83), qualified_name("ExposesItsArray"), "ModellingRule_ExposesItsArray");
    nodes["ModellingRule_MandatoryShared"] = std::make_shared<ua_object>(ua_node_id(0, 79), qualified_name("MandatoryShared"), "ModellingRule_MandatoryShared");
    nodes["ModellingRule_OptionalPlaceholder"] = std::make_shared<ua_object>(ua_node_id(0, 11508), qualified_name("OptionalPlaceholder"), "ModellingRule_OptionalPlaceholder");
    nodes["ModellingRule_MandatoryPlaceholder"] = std::make_shared<ua_object>(ua_node_id(0, 11510), qualified_name("MandatoryPlaceholder"), "ModellingRule_MandatoryPlaceholder");
    nodes["RootFolder"] = std::make_shared<ua_object>(ua_node_id(0, 84), qualified_name("Root"), "RootFolder");
    nodes["ObjectsFolder"] = std::make_shared<ua_object>(ua_node_id(0, 85), qualified_name("Objects"), "ObjectsFolder");
    nodes["TypesFolder"] = std::make_shared<ua_object>(ua_node_id(0, 86), qualified_name("Types"), "TypesFolder");
    nodes["ViewsFolder"] = std::make_shared<ua_object>(ua_node_id(0, 87), qualified_name("Views"), "ViewsFolder");
    nodes["ObjectTypesFolder"] = std::make_shared<ua_object>(ua_node_id(0, 88), qualified_name("ObjectTypes"), "ObjectTypesFolder");
    nodes["VariableTypesFolder"] = std::make_shared<ua_object>(ua_node_id(0, 89), qualified_name("VariableTypes"), "VariableTypesFolder");
    nodes["DataTypesFolder"] = std::make_shared<ua_object>(ua_node_id(0, 90), qualified_name("DataTypes"), "DataTypesFolder");
    nodes["ReferenceTypesFolder"] = std::make_shared<ua_object>(ua_node_id(0, 91), qualified_name("ReferenceTypes"), "ReferenceTypesFolder");
    nodes["XmlSchema_TypeSystem"] = std::make_shared<ua_object>(ua_node_id(0, 92), qualified_name("XML Schema"), "XmlSchema_TypeSystem");
    nodes["OPCBinarySchema_TypeSystem"] = std::make_shared<ua_object>(ua_node_id(0, 93), qualified_name("OPC Binary"), "OPCBinarySchema_TypeSystem");
    nodes["ServerType"] = std::make_shared<ua_object_type>(ua_node_id(0, 2004), qualified_name("ServerType"), "");
    nodes["ServerCapabilities"] = std::make_shared<ua_object>(ua_node_id(0, 2009), qualified_name("ServerCapabilities"), "");
    nodes["ModellingRules"] = std::make_shared<ua_object>(ua_node_id(0, 3093), qualified_name("ModellingRules"), "");
    nodes["AggregateFunctions"] = std::make_shared<ua_object>(ua_node_id(0, 3094), qualified_name("AggregateFunctions"), "");
    nodes["ServerDiagnostics"] = std::make_shared<ua_object>(ua_node_id(0, 2010), qualified_name("ServerDiagnostics"), "");
    nodes["SessionsDiagnosticsSummary"] = std::make_shared<ua_object>(ua_node_id(0, 3111), qualified_name("SessionsDiagnosticsSummary"), "");
    nodes["VendorServerInfo"] = std::make_shared<ua_object>(ua_node_id(0, 2011), qualified_name("VendorServerInfo"), "");
    nodes["ServerRedundancy"] = std::make_shared<ua_object>(ua_node_id(0, 2012), qualified_name("ServerRedundancy"), "");
    nodes["Namespaces"] = std::make_shared<ua_object>(ua_node_id(0, 11527), qualified_name("Namespaces"), "");
    nodes["ServerCapabilitiesType"] = std::make_shared<ua_object_type>(ua_node_id(0, 2013), qualified_name("ServerCapabilitiesType"), "");
    nodes["OperationLimits"] = std::make_shared<ua_object>(ua_node_id(0, 11551), qualified_name("OperationLimits"), "");
    nodes["ModellingRules"] = std::make_shared<ua_object>(ua_node_id(0, 2019), qualified_name("ModellingRules"), "");
    nodes["AggregateFunctions"] = std::make_shared<ua_object>(ua_node_id(0, 2754), qualified_name("AggregateFunctions"), "");
    nodes["ServerDiagnosticsType"] = std::make_shared<ua_object_type>(ua_node_id(0, 2020), qualified_name("ServerDiagnosticsType"), "");
    nodes["SessionsDiagnosticsSummary"] = std::make_shared<ua_object>(ua_node_id(0, 2744), qualified_name("SessionsDiagnosticsSummary"), "");
    nodes["SessionsDiagnosticsSummaryType"] = std::make_shared<ua_object_type>(ua_node_id(0, 2026), qualified_name("SessionsDiagnosticsSummaryType"), "");
    nodes["ClientName_Placeholder"] = std::make_shared<ua_object>(ua_node_id(0, 12097), qualified_name("<ClientName>"), "ClientName_Placeholder");
    nodes["SessionDiagnosticsObjectType"] = std::make_shared<ua_object_type>(ua_node_id(0, 2029), qualified_name("SessionDiagnosticsObjectType"), "");
    nodes["VendorServerInfoType"] = std::make_shared<ua_object_type>(ua_node_id(0, 2033), qualified_name("VendorServerInfoType"), "");
    nodes["ServerRedundancyType"] = std::make_shared<ua_object_type>(ua_node_id(0, 2034), qualified_name("ServerRedundancyType"), "");
    nodes["TransparentRedundancyType"] = std::make_shared<ua_object_type>(ua_node_id(0, 2036), qualified_name("TransparentRedundancyType"), "");
    nodes["NonTransparentRedundancyType"] = std::make_shared<ua_object_type>(ua_node_id(0, 2039), qualified_name("NonTransparentRedundancyType"), "");
    nodes["NonTransparentNetworkRedundancyType"] = std::make_shared<ua_object_type>(ua_node_id(0, 11945), qualified_name("NonTransparentNetworkRedundancyType"), "");
    nodes["OperationLimitsType"] = std::make_shared<ua_object_type>(ua_node_id(0, 11564), qualified_name("OperationLimitsType"), "");
    nodes["FileType"] = std::make_shared<ua_object_type>(ua_node_id(0, 11575), qualified_name("FileType"), "");
    nodes["FileDirectoryType"] = std::make_shared<ua_object_type>(ua_node_id(0, 13353), qualified_name("FileDirectoryType"), "");
    nodes["FileDirectoryName_Placeholder"] = std::make_shared<ua_object>(ua_node_id(0, 13354), qualified_name("<FileDirectoryName>"), "FileDirectoryName_Placeholder");
    nodes["FileName_Placeholder"] = std::make_shared<ua_object>(ua_node_id(0, 13366), qualified_name("<FileName>"), "FileName_Placeholder");
    nodes["AddressSpaceFileType"] = std::make_shared<ua_object_type>(ua_node_id(0, 11595), qualified_name("AddressSpaceFileType"), "");
    nodes["NamespaceMetadataType"] = std::make_shared<ua_object_type>(ua_node_id(0, 11616), qualified_name("NamespaceMetadataType"), "");
    nodes["NamespaceFile"] = std::make_shared<ua_object>(ua_node_id(0, 11624), qualified_name("NamespaceFile"), "");
    nodes["NamespacesType"] = std::make_shared<ua_object_type>(ua_node_id(0, 11645), qualified_name("NamespacesType"), "");
    nodes["NamespaceIdentifier_Placeholder"] = std::make_shared<ua_object>(ua_node_id(0, 11646), qualified_name("<NamespaceIdentifier>"), "NamespaceIdentifier_Placeholder");
    nodes["AddressSpaceFile"] = std::make_shared<ua_object>(ua_node_id(0, 11675), qualified_name("AddressSpaceFile"), "");
    nodes["BaseEventType"] = std::make_shared<ua_object_type>(ua_node_id(0, 2041), qualified_name("BaseEventType"), "");
    nodes["AuditEventType"] = std::make_shared<ua_object_type>(ua_node_id(0, 2052), qualified_name("AuditEventType"), "");
    nodes["AuditSecurityEventType"] = std::make_shared<ua_object_type>(ua_node_id(0, 2058), qualified_name("AuditSecurityEventType"), "");
    nodes["AuditChannelEventType"] = std::make_shared<ua_object_type>(ua_node_id(0, 2059), qualified_name("AuditChannelEventType"), "");
    nodes["AuditOpenSecureChannelEventType"] = std::make_shared<ua_object_type>(ua_node_id(0, 2060), qualified_name("AuditOpenSecureChannelEventType"), "");
    nodes["AuditSessionEventType"] = std::make_shared<ua_object_type>(ua_node_id(0, 2069), qualified_name("AuditSessionEventType"), "");
    nodes["AuditCreateSessionEventType"] = std::make_shared<ua_object_type>(ua_node_id(0, 2071), qualified_name("AuditCreateSessionEventType"), "");
    nodes["AuditUrlMismatchEventType"] = std::make_shared<ua_object_type>(ua_node_id(0, 2748), qualified_name("AuditUrlMismatchEventType"), "");
    nodes["AuditActivateSessionEventType"] = std::make_shared<ua_object_type>(ua_node_id(0, 2075), qualified_name("AuditActivateSessionEventType"), "");
    nodes["AuditCancelEventType"] = std::make_shared<ua_object_type>(ua_node_id(0, 2078), qualified_name("AuditCancelEventType"), "");
    nodes["AuditCertificateEventType"] = std::make_shared<ua_object_type>(ua_node_id(0, 2080), qualified_name("AuditCertificateEventType"), "");
    nodes["AuditCertificateDataMismatchEventType"] = std::make_shared<ua_object_type>(ua_node_id(0, 2082), qualified_name("AuditCertificateDataMismatchEventType"), "");
    nodes["AuditCertificateExpiredEventType"] = std::make_shared<ua_object_type>(ua_node_id(0, 2085), qualified_name("AuditCertificateExpiredEventType"), "");
    nodes["AuditCertificateInvalidEventType"] = std::make_shared<ua_object_type>(ua_node_id(0, 2086), qualified_name("AuditCertificateInvalidEventType"), "");
    nodes["AuditCertificateUntrustedEventType"] = std::make_shared<ua_object_type>(ua_node_id(0, 2087), qualified_name("AuditCertificateUntrustedEventType"), "");
    nodes["AuditCertificateRevokedEventType"] = std::make_shared<ua_object_type>(ua_node_id(0, 2088), qualified_name("AuditCertificateRevokedEventType"), "");
    nodes["AuditCertificateMismatchEventType"] = std::make_shared<ua_object_type>(ua_node_id(0, 2089), qualified_name("AuditCertificateMismatchEventType"), "");
    nodes["AuditNodeManagementEventType"] = std::make_shared<ua_object_type>(ua_node_id(0, 2090), qualified_name("AuditNodeManagementEventType"), "");
    nodes["AuditAddNodesEventType"] = std::make_shared<ua_object_type>(ua_node_id(0, 2091), qualified_name("AuditAddNodesEventType"), "");
    nodes["AuditDeleteNodesEventType"] = std::make_shared<ua_object_type>(ua_node_id(0, 2093), qualified_name("AuditDeleteNodesEventType"), "");
    nodes["AuditAddReferencesEventType"] = std::make_shared<ua_object_type>(ua_node_id(0, 2095), qualified_name("AuditAddReferencesEventType"), "");
    nodes["AuditDeleteReferencesEventType"] = std::make_shared<ua_object_type>(ua_node_id(0, 2097), qualified_name("AuditDeleteReferencesEventType"), "");
    nodes["AuditUpdateEventType"] = std::make_shared<ua_object_type>(ua_node_id(0, 2099), qualified_name("AuditUpdateEventType"), "");
    nodes["AuditWriteUpdateEventType"] = std::make_shared<ua_object_type>(ua_node_id(0, 2100), qualified_name("AuditWriteUpdateEventType"), "");
    nodes["AuditHistoryUpdateEventType"] = std::make_shared<ua_object_type>(ua_node_id(0, 2104), qualified_name("AuditHistoryUpdateEventType"), "");
    nodes["AuditUpdateMethodEventType"] = std::make_shared<ua_object_type>(ua_node_id(0, 2127), qualified_name("AuditUpdateMethodEventType"), "");
    nodes["SystemEventType"] = std::make_shared<ua_object_type>(ua_node_id(0, 2130), qualified_name("SystemEventType"), "");
    nodes["DeviceFailureEventType"] = std::make_shared<ua_object_type>(ua_node_id(0, 2131), qualified_name("DeviceFailureEventType"), "");
    nodes["SystemStatusChangeEventType"] = std::make_shared<ua_object_type>(ua_node_id(0, 11446), qualified_name("SystemStatusChangeEventType"), "");
    nodes["BaseModelChangeEventType"] = std::make_shared<ua_object_type>(ua_node_id(0, 2132), qualified_name("BaseModelChangeEventType"), "");
    nodes["GeneralModelChangeEventType"] = std::make_shared<ua_object_type>(ua_node_id(0, 2133), qualified_name("GeneralModelChangeEventType"), "");
    nodes["SemanticChangeEventType"] = std::make_shared<ua_object_type>(ua_node_id(0, 2738), qualified_name("SemanticChangeEventType"), "");
    nodes["EventQueueOverflowEventType"] = std::make_shared<ua_object_type>(ua_node_id(0, 3035), qualified_name("EventQueueOverflowEventType"), "");
    nodes["ProgressEventType"] = std::make_shared<ua_object_type>(ua_node_id(0, 11436), qualified_name("ProgressEventType"), "");
    nodes["AggregateFunctionType"] = std::make_shared<ua_object_type>(ua_node_id(0, 2340), qualified_name("AggregateFunctionType"), "");
    nodes["ServerVendorCapabilityType"] = std::make_shared<ua_variable_type>(ua_node_id(0, 2137), qualified_name("ServerVendorCapabilityType"), "");
    nodes["ServerStatusType"] = std::make_shared<ua_variable_type>(ua_node_id(0, 2138), qualified_name("ServerStatusType"), "");
    nodes["BuildInfoType"] = std::make_shared<ua_variable_type>(ua_node_id(0, 3051), qualified_name("BuildInfoType"), "");
    nodes["ServerDiagnosticsSummaryType"] = std::make_shared<ua_variable_type>(ua_node_id(0, 2150), qualified_name("ServerDiagnosticsSummaryType"), "");
    nodes["SamplingIntervalDiagnosticsArrayType"] = std::make_shared<ua_variable_type>(ua_node_id(0, 2164), qualified_name("SamplingIntervalDiagnosticsArrayType"), "");
    nodes["SamplingIntervalDiagnosticsType"] = std::make_shared<ua_variable_type>(ua_node_id(0, 2165), qualified_name("SamplingIntervalDiagnosticsType"), "");
    nodes["SubscriptionDiagnosticsArrayType"] = std::make_shared<ua_variable_type>(ua_node_id(0, 2171), qualified_name("SubscriptionDiagnosticsArrayType"), "");
    nodes["SubscriptionDiagnosticsType"] = std::make_shared<ua_variable_type>(ua_node_id(0, 2172), qualified_name("SubscriptionDiagnosticsType"), "");
    nodes["SessionDiagnosticsArrayType"] = std::make_shared<ua_variable_type>(ua_node_id(0, 2196), qualified_name("SessionDiagnosticsArrayType"), "");
    nodes["SessionDiagnosticsVariableType"] = std::make_shared<ua_variable_type>(ua_node_id(0, 2197), qualified_name("SessionDiagnosticsVariableType"), "");
    nodes["SessionSecurityDiagnosticsArrayType"] = std::make_shared<ua_variable_type>(ua_node_id(0, 2243), qualified_name("SessionSecurityDiagnosticsArrayType"), "");
    nodes["SessionSecurityDiagnosticsType"] = std::make_shared<ua_variable_type>(ua_node_id(0, 2244), qualified_name("SessionSecurityDiagnosticsType"), "");
    nodes["OptionSetType"] = std::make_shared<ua_variable_type>(ua_node_id(0, 11487), qualified_name("OptionSetType"), "");
    nodes["EventTypesFolder"] = std::make_shared<ua_object>(ua_node_id(0, 3048), qualified_name("EventTypes"), "EventTypesFolder");
    nodes["Server"] = std::make_shared<ua_object>(ua_node_id(0, 2253), qualified_name("Server"), "");
    nodes["ServerCapabilities"] = std::make_shared<ua_object>(ua_node_id(0, 2268), qualified_name("ServerCapabilities"), "");
    nodes["OperationLimits"] = std::make_shared<ua_object>(ua_node_id(0, 11704), qualified_name("OperationLimits"), "");
    nodes["ModellingRules"] = std::make_shared<ua_object>(ua_node_id(0, 2996), qualified_name("ModellingRules"), "");
    nodes["AggregateFunctions"] = std::make_shared<ua_object>(ua_node_id(0, 2997), qualified_name("AggregateFunctions"), "");
    nodes["ServerDiagnostics"] = std::make_shared<ua_object>(ua_node_id(0, 2274), qualified_name("ServerDiagnostics"), "");
    nodes["SessionsDiagnosticsSummary"] = std::make_shared<ua_object>(ua_node_id(0, 3706), qualified_name("SessionsDiagnosticsSummary"), "");
    nodes["VendorServerInfo"] = std::make_shared<ua_object>(ua_node_id(0, 2295), qualified_name("VendorServerInfo"), "");
    nodes["ServerRedundancy"] = std::make_shared<ua_object>(ua_node_id(0, 2296), qualified_name("ServerRedundancy"), "");
    nodes["Namespaces"] = std::make_shared<ua_object>(ua_node_id(0, 11715), qualified_name("Namespaces"), "");
    nodes["OPCUANamespaceUri"] = std::make_shared<ua_object>(ua_node_id(0, 15182), qualified_name("0:http://opcfoundation.org/UA/"), "OPCUANamespaceUri");
    nodes["HistoryServerCapabilities"] = std::make_shared<ua_object>(ua_node_id(0, 11192), qualified_name("HistoryServerCapabilities"), "");
    nodes["AggregateFunctions"] = std::make_shared<ua_object>(ua_node_id(0, 11201), qualified_name("AggregateFunctions"), "");
    nodes["StateMachineType"] = std::make_shared<ua_object_type>(ua_node_id(0, 2299), qualified_name("StateMachineType"), "");
    nodes["StateVariableType"] = std::make_shared<ua_variable_type>(ua_node_id(0, 2755), qualified_name("StateVariableType"), "");
    nodes["TransitionVariableType"] = std::make_shared<ua_variable_type>(ua_node_id(0, 2762), qualified_name("TransitionVariableType"), "");
    nodes["FiniteStateMachineType"] = std::make_shared<ua_object_type>(ua_node_id(0, 2771), qualified_name("FiniteStateMachineType"), "");
    nodes["FiniteStateVariableType"] = std::make_shared<ua_variable_type>(ua_node_id(0, 2760), qualified_name("FiniteStateVariableType"), "");
    nodes["FiniteTransitionVariableType"] = std::make_shared<ua_variable_type>(ua_node_id(0, 2767), qualified_name("FiniteTransitionVariableType"), "");
    nodes["StateType"] = std::make_shared<ua_object_type>(ua_node_id(0, 2307), qualified_name("StateType"), "");
    nodes["InitialStateType"] = std::make_shared<ua_object_type>(ua_node_id(0, 2309), qualified_name("InitialStateType"), "");
    nodes["TransitionType"] = std::make_shared<ua_object_type>(ua_node_id(0, 2310), qualified_name("TransitionType"), "");
    nodes["TransitionEventType"] = std::make_shared<ua_object_type>(ua_node_id(0, 2311), qualified_name("TransitionEventType"), "");
    nodes["AuditUpdateStateEventType"] = std::make_shared<ua_object_type>(ua_node_id(0, 2315), qualified_name("AuditUpdateStateEventType"), "");
    nodes["DataItemType"] = std::make_shared<ua_variable_type>(ua_node_id(0, 2365), qualified_name("DataItemType"), "");
    nodes["AnalogItemType"] = std::make_shared<ua_variable_type>(ua_node_id(0, 2368), qualified_name("AnalogItemType"), "");
    nodes["DiscreteItemType"] = std::make_shared<ua_variable_type>(ua_node_id(0, 2372), qualified_name("DiscreteItemType"), "");
    nodes["TwoStateDiscreteType"] = std::make_shared<ua_variable_type>(ua_node_id(0, 2373), qualified_name("TwoStateDiscreteType"), "");
    nodes["MultiStateDiscreteType"] = std::make_shared<ua_variable_type>(ua_node_id(0, 2376), qualified_name("MultiStateDiscreteType"), "");
    nodes["MultiStateValueDiscreteType"] = std::make_shared<ua_variable_type>(ua_node_id(0, 11238), qualified_name("MultiStateValueDiscreteType"), "");
    nodes["ArrayItemType"] = std::make_shared<ua_variable_type>(ua_node_id(0, 12021), qualified_name("ArrayItemType"), "");
    nodes["YArrayItemType"] = std::make_shared<ua_variable_type>(ua_node_id(0, 12029), qualified_name("YArrayItemType"), "");
    nodes["XYArrayItemType"] = std::make_shared<ua_variable_type>(ua_node_id(0, 12038), qualified_name("XYArrayItemType"), "");
    nodes["ImageItemType"] = std::make_shared<ua_variable_type>(ua_node_id(0, 12047), qualified_name("ImageItemType"), "");
    nodes["CubeItemType"] = std::make_shared<ua_variable_type>(ua_node_id(0, 12057), qualified_name("CubeItemType"), "");
    nodes["NDimensionArrayItemType"] = std::make_shared<ua_variable_type>(ua_node_id(0, 12068), qualified_name("NDimensionArrayItemType"), "");
    nodes["TwoStateVariableType"] = std::make_shared<ua_variable_type>(ua_node_id(0, 8995), qualified_name("TwoStateVariableType"), "");
    nodes["ConditionVariableType"] = std::make_shared<ua_variable_type>(ua_node_id(0, 9002), qualified_name("ConditionVariableType"), "");
    nodes["ConditionType"] = std::make_shared<ua_object_type>(ua_node_id(0, 2782), qualified_name("ConditionType"), "");
    nodes["DialogConditionType"] = std::make_shared<ua_object_type>(ua_node_id(0, 2830), qualified_name("DialogConditionType"), "");
    nodes["AcknowledgeableConditionType"] = std::make_shared<ua_object_type>(ua_node_id(0, 2881), qualified_name("AcknowledgeableConditionType"), "");
    nodes["AlarmConditionType"] = std::make_shared<ua_object_type>(ua_node_id(0, 2915), qualified_name("AlarmConditionType"), "");
    nodes["ShelvingState"] = std::make_shared<ua_object>(ua_node_id(0, 9178), qualified_name("ShelvingState"), "");
    nodes["ShelvedStateMachineType"] = std::make_shared<ua_object_type>(ua_node_id(0, 2929), qualified_name("ShelvedStateMachineType"), "");
    nodes["Unshelved"] = std::make_shared<ua_object>(ua_node_id(0, 2930), qualified_name("Unshelved"), "");
    nodes["TimedShelved"] = std::make_shared<ua_object>(ua_node_id(0, 2932), qualified_name("TimedShelved"), "");
    nodes["OneShotShelved"] = std::make_shared<ua_object>(ua_node_id(0, 2933), qualified_name("OneShotShelved"), "");
    nodes["UnshelvedToTimedShelved"] = std::make_shared<ua_object>(ua_node_id(0, 2935), qualified_name("UnshelvedToTimedShelved"), "");
    nodes["UnshelvedToOneShotShelved"] = std::make_shared<ua_object>(ua_node_id(0, 2936), qualified_name("UnshelvedToOneShotShelved"), "");
    nodes["TimedShelvedToUnshelved"] = std::make_shared<ua_object>(ua_node_id(0, 2940), qualified_name("TimedShelvedToUnshelved"), "");
    nodes["TimedShelvedToOneShotShelved"] = std::make_shared<ua_object>(ua_node_id(0, 2942), qualified_name("TimedShelvedToOneShotShelved"), "");
    nodes["OneShotShelvedToUnshelved"] = std::make_shared<ua_object>(ua_node_id(0, 2943), qualified_name("OneShotShelvedToUnshelved"), "");
    nodes["OneShotShelvedToTimedShelved"] = std::make_shared<ua_object>(ua_node_id(0, 2945), qualified_name("OneShotShelvedToTimedShelved"), "");
    nodes["LimitAlarmType"] = std::make_shared<ua_object_type>(ua_node_id(0, 2955), qualified_name("LimitAlarmType"), "");
    nodes["ExclusiveLimitStateMachineType"] = std::make_shared<ua_object_type>(ua_node_id(0, 9318), qualified_name("ExclusiveLimitStateMachineType"), "");
    nodes["HighHigh"] = std::make_shared<ua_object>(ua_node_id(0, 9329), qualified_name("HighHigh"), "");
    nodes["High"] = std::make_shared<ua_object>(ua_node_id(0, 9331), qualified_name("High"), "");
    nodes["Low"] = std::make_shared<ua_object>(ua_node_id(0, 9333), qualified_name("Low"), "");
    nodes["LowLow"] = std::make_shared<ua_object>(ua_node_id(0, 9335), qualified_name("LowLow"), "");
    nodes["LowLowToLow"] = std::make_shared<ua_object>(ua_node_id(0, 9337), qualified_name("LowLowToLow"), "");
    nodes["LowToLowLow"] = std::make_shared<ua_object>(ua_node_id(0, 9338), qualified_name("LowToLowLow"), "");
    nodes["HighHighToHigh"] = std::make_shared<ua_object>(ua_node_id(0, 9339), qualified_name("HighHighToHigh"), "");
    nodes["HighToHighHigh"] = std::make_shared<ua_object>(ua_node_id(0, 9340), qualified_name("HighToHighHigh"), "");
    nodes["ExclusiveLimitAlarmType"] = std::make_shared<ua_object_type>(ua_node_id(0, 9341), qualified_name("ExclusiveLimitAlarmType"), "");
    nodes["LimitState"] = std::make_shared<ua_object>(ua_node_id(0, 9455), qualified_name("LimitState"), "");
    nodes["NonExclusiveLimitAlarmType"] = std::make_shared<ua_object_type>(ua_node_id(0, 9906), qualified_name("NonExclusiveLimitAlarmType"), "");
    nodes["NonExclusiveLevelAlarmType"] = std::make_shared<ua_object_type>(ua_node_id(0, 10060), qualified_name("NonExclusiveLevelAlarmType"), "");
    nodes["ExclusiveLevelAlarmType"] = std::make_shared<ua_object_type>(ua_node_id(0, 9482), qualified_name("ExclusiveLevelAlarmType"), "");
    nodes["NonExclusiveDeviationAlarmType"] = std::make_shared<ua_object_type>(ua_node_id(0, 10368), qualified_name("NonExclusiveDeviationAlarmType"), "");
    nodes["ExclusiveDeviationAlarmType"] = std::make_shared<ua_object_type>(ua_node_id(0, 9764), qualified_name("ExclusiveDeviationAlarmType"), "");
    nodes["NonExclusiveRateOfChangeAlarmType"] = std::make_shared<ua_object_type>(ua_node_id(0, 10214), qualified_name("NonExclusiveRateOfChangeAlarmType"), "");
    nodes["ExclusiveRateOfChangeAlarmType"] = std::make_shared<ua_object_type>(ua_node_id(0, 9623), qualified_name("ExclusiveRateOfChangeAlarmType"), "");
    nodes["DiscreteAlarmType"] = std::make_shared<ua_object_type>(ua_node_id(0, 10523), qualified_name("DiscreteAlarmType"), "");
    nodes["OffNormalAlarmType"] = std::make_shared<ua_object_type>(ua_node_id(0, 10637), qualified_name("OffNormalAlarmType"), "");
    nodes["SystemOffNormalAlarmType"] = std::make_shared<ua_object_type>(ua_node_id(0, 11753), qualified_name("SystemOffNormalAlarmType"), "");
    nodes["CertificateExpirationAlarmType"] = std::make_shared<ua_object_type>(ua_node_id(0, 13225), qualified_name("CertificateExpirationAlarmType"), "");
    nodes["TripAlarmType"] = std::make_shared<ua_object_type>(ua_node_id(0, 10751), qualified_name("TripAlarmType"), "");
    nodes["BaseConditionClassType"] = std::make_shared<ua_object_type>(ua_node_id(0, 11163), qualified_name("BaseConditionClassType"), "");
    nodes["ProcessConditionClassType"] = std::make_shared<ua_object_type>(ua_node_id(0, 11164), qualified_name("ProcessConditionClassType"), "");
    nodes["MaintenanceConditionClassType"] = std::make_shared<ua_object_type>(ua_node_id(0, 11165), qualified_name("MaintenanceConditionClassType"), "");
    nodes["SystemConditionClassType"] = std::make_shared<ua_object_type>(ua_node_id(0, 11166), qualified_name("SystemConditionClassType"), "");
    nodes["AuditConditionEventType"] = std::make_shared<ua_object_type>(ua_node_id(0, 2790), qualified_name("AuditConditionEventType"), "");
    nodes["AuditConditionEnableEventType"] = std::make_shared<ua_object_type>(ua_node_id(0, 2803), qualified_name("AuditConditionEnableEventType"), "");
    nodes["AuditConditionCommentEventType"] = std::make_shared<ua_object_type>(ua_node_id(0, 2829), qualified_name("AuditConditionCommentEventType"), "");
    nodes["AuditConditionRespondEventType"] = std::make_shared<ua_object_type>(ua_node_id(0, 8927), qualified_name("AuditConditionRespondEventType"), "");
    nodes["AuditConditionAcknowledgeEventType"] = std::make_shared<ua_object_type>(ua_node_id(0, 8944), qualified_name("AuditConditionAcknowledgeEventType"), "");
    nodes["AuditConditionConfirmEventType"] = std::make_shared<ua_object_type>(ua_node_id(0, 8961), qualified_name("AuditConditionConfirmEventType"), "");
    nodes["AuditConditionShelvingEventType"] = std::make_shared<ua_object_type>(ua_node_id(0, 11093), qualified_name("AuditConditionShelvingEventType"), "");
    nodes["RefreshStartEventType"] = std::make_shared<ua_object_type>(ua_node_id(0, 2787), qualified_name("RefreshStartEventType"), "");
    nodes["RefreshEndEventType"] = std::make_shared<ua_object_type>(ua_node_id(0, 2788), qualified_name("RefreshEndEventType"), "");
    nodes["RefreshRequiredEventType"] = std::make_shared<ua_object_type>(ua_node_id(0, 2789), qualified_name("RefreshRequiredEventType"), "");
    nodes["ProgramStateMachineType"] = std::make_shared<ua_object_type>(ua_node_id(0, 2391), qualified_name("ProgramStateMachineType"), "");
    nodes["FinalResultData"] = std::make_shared<ua_object>(ua_node_id(0, 3850), qualified_name("FinalResultData"), "");
    nodes["Ready"] = std::make_shared<ua_object>(ua_node_id(0, 2400), qualified_name("Ready"), "");
    nodes["Running"] = std::make_shared<ua_object>(ua_node_id(0, 2402), qualified_name("Running"), "");
    nodes["Suspended"] = std::make_shared<ua_object>(ua_node_id(0, 2404), qualified_name("Suspended"), "");
    nodes["Halted"] = std::make_shared<ua_object>(ua_node_id(0, 2406), qualified_name("Halted"), "");
    nodes["HaltedToReady"] = std::make_shared<ua_object>(ua_node_id(0, 2408), qualified_name("HaltedToReady"), "");
    nodes["ReadyToRunning"] = std::make_shared<ua_object>(ua_node_id(0, 2410), qualified_name("ReadyToRunning"), "");
    nodes["RunningToHalted"] = std::make_shared<ua_object>(ua_node_id(0, 2412), qualified_name("RunningToHalted"), "");
    nodes["RunningToReady"] = std::make_shared<ua_object>(ua_node_id(0, 2414), qualified_name("RunningToReady"), "");
    nodes["RunningToSuspended"] = std::make_shared<ua_object>(ua_node_id(0, 2416), qualified_name("RunningToSuspended"), "");
    nodes["SuspendedToRunning"] = std::make_shared<ua_object>(ua_node_id(0, 2418), qualified_name("SuspendedToRunning"), "");
    nodes["SuspendedToHalted"] = std::make_shared<ua_object>(ua_node_id(0, 2420), qualified_name("SuspendedToHalted"), "");
    nodes["SuspendedToReady"] = std::make_shared<ua_object>(ua_node_id(0, 2422), qualified_name("SuspendedToReady"), "");
    nodes["ReadyToHalted"] = std::make_shared<ua_object>(ua_node_id(0, 2424), qualified_name("ReadyToHalted"), "");
    nodes["ProgramTransitionEventType"] = std::make_shared<ua_object_type>(ua_node_id(0, 2378), qualified_name("ProgramTransitionEventType"), "");
    nodes["AuditProgramTransitionEventType"] = std::make_shared<ua_object_type>(ua_node_id(0, 11856), qualified_name("AuditProgramTransitionEventType"), "");
    nodes["ProgramTransitionAuditEventType"] = std::make_shared<ua_object_type>(ua_node_id(0, 3806), qualified_name("ProgramTransitionAuditEventType"), "");
    nodes["ProgramDiagnosticType"] = std::make_shared<ua_variable_type>(ua_node_id(0, 2380), qualified_name("ProgramDiagnosticType"), "");
    nodes["HistoricalDataConfigurationType"] = std::make_shared<ua_object_type>(ua_node_id(0, 2318), qualified_name("HistoricalDataConfigurationType"), "");
    nodes["AggregateConfiguration"] = std::make_shared<ua_object>(ua_node_id(0, 3059), qualified_name("AggregateConfiguration"), "");
    nodes["AggregateFunctions"] = std::make_shared<ua_object>(ua_node_id(0, 11876), qualified_name("AggregateFunctions"), "");
    nodes["HAConfiguration"] = std::make_shared<ua_object>(ua_node_id(0, 11202), qualified_name("HA Configuration"), "HAConfiguration");
    nodes["AggregateConfiguration"] = std::make_shared<ua_object>(ua_node_id(0, 11203), qualified_name("AggregateConfiguration"), "");
    nodes["HistoryServerCapabilitiesType"] = std::make_shared<ua_object_type>(ua_node_id(0, 2330), qualified_name("HistoryServerCapabilitiesType"), "");
    nodes["AggregateFunctions"] = std::make_shared<ua_object>(ua_node_id(0, 11172), qualified_name("AggregateFunctions"), "");
    nodes["AuditHistoryEventUpdateEventType"] = std::make_shared<ua_object_type>(ua_node_id(0, 2999), qualified_name("AuditHistoryEventUpdateEventType"), "");
    nodes["AuditHistoryValueUpdateEventType"] = std::make_shared<ua_object_type>(ua_node_id(0, 3006), qualified_name("AuditHistoryValueUpdateEventType"), "");
    nodes["AuditHistoryDeleteEventType"] = std::make_shared<ua_object_type>(ua_node_id(0, 3012), qualified_name("AuditHistoryDeleteEventType"), "");
    nodes["AuditHistoryRawModifyDeleteEventType"] = std::make_shared<ua_object_type>(ua_node_id(0, 3014), qualified_name("AuditHistoryRawModifyDeleteEventType"), "");
    nodes["AuditHistoryAtTimeDeleteEventType"] = std::make_shared<ua_object_type>(ua_node_id(0, 3019), qualified_name("AuditHistoryAtTimeDeleteEventType"), "");
    nodes["AuditHistoryEventDeleteEventType"] = std::make_shared<ua_object_type>(ua_node_id(0, 3022), qualified_name("AuditHistoryEventDeleteEventType"), "");
    nodes["TrustListType"] = std::make_shared<ua_object_type>(ua_node_id(0, 12522), qualified_name("TrustListType"), "");
    nodes["CertificateGroupType"] = std::make_shared<ua_object_type>(ua_node_id(0, 12555), qualified_name("CertificateGroupType"), "");
    nodes["TrustList"] = std::make_shared<ua_object>(ua_node_id(0, 13599), qualified_name("TrustList"), "");
    nodes["CertificateGroupFolderType"] = std::make_shared<ua_object_type>(ua_node_id(0, 13813), qualified_name("CertificateGroupFolderType"), "");
    nodes["DefaultApplicationGroup"] = std::make_shared<ua_object>(ua_node_id(0, 13814), qualified_name("DefaultApplicationGroup"), "");
    nodes["TrustList"] = std::make_shared<ua_object>(ua_node_id(0, 13815), qualified_name("TrustList"), "");
    nodes["DefaultHttpsGroup"] = std::make_shared<ua_object>(ua_node_id(0, 13848), qualified_name("DefaultHttpsGroup"), "");
    nodes["TrustList"] = std::make_shared<ua_object>(ua_node_id(0, 13849), qualified_name("TrustList"), "");
    nodes["DefaultUserTokenGroup"] = std::make_shared<ua_object>(ua_node_id(0, 13882), qualified_name("DefaultUserTokenGroup"), "");
    nodes["TrustList"] = std::make_shared<ua_object>(ua_node_id(0, 13883), qualified_name("TrustList"), "");
    nodes["AdditionalGroup_Placeholder"] = std::make_shared<ua_object>(ua_node_id(0, 13916), qualified_name("<AdditionalGroup>"), "AdditionalGroup_Placeholder");
    nodes["TrustList"] = std::make_shared<ua_object>(ua_node_id(0, 13917), qualified_name("TrustList"), "");
    nodes["CertificateType"] = std::make_shared<ua_object_type>(ua_node_id(0, 12556), qualified_name("CertificateType"), "");
    nodes["ApplicationCertificateType"] = std::make_shared<ua_object_type>(ua_node_id(0, 12557), qualified_name("ApplicationCertificateType"), "");
    nodes["HttpsCertificateType"] = std::make_shared<ua_object_type>(ua_node_id(0, 12558), qualified_name("HttpsCertificateType"), "");
    nodes["RsaMinApplicationCertificateType"] = std::make_shared<ua_object_type>(ua_node_id(0, 12559), qualified_name("RsaMinApplicationCertificateType"), "");
    nodes["RsaSha256ApplicationCertificateType"] = std::make_shared<ua_object_type>(ua_node_id(0, 12560), qualified_name("RsaSha256ApplicationCertificateType"), "");
    nodes["TrustListUpdatedAuditEventType"] = std::make_shared<ua_object_type>(ua_node_id(0, 12561), qualified_name("TrustListUpdatedAuditEventType"), "");
    nodes["ServerConfigurationType"] = std::make_shared<ua_object_type>(ua_node_id(0, 12581), qualified_name("ServerConfigurationType"), "");
    nodes["CertificateGroups"] = std::make_shared<ua_object>(ua_node_id(0, 13950), qualified_name("CertificateGroups"), "");
    nodes["DefaultApplicationGroup"] = std::make_shared<ua_object>(ua_node_id(0, 13951), qualified_name("DefaultApplicationGroup"), "");
    nodes["TrustList"] = std::make_shared<ua_object>(ua_node_id(0, 13952), qualified_name("TrustList"), "");
    nodes["CertificateUpdatedAuditEventType"] = std::make_shared<ua_object_type>(ua_node_id(0, 12620), qualified_name("CertificateUpdatedAuditEventType"), "");
    nodes["ServerConfiguration"] = std::make_shared<ua_object>(ua_node_id(0, 12637), qualified_name("ServerConfiguration"), "");
    nodes["CertificateGroups"] = std::make_shared<ua_object>(ua_node_id(0, 14053), qualified_name("CertificateGroups"), "");
    nodes["DefaultApplicationGroup"] = std::make_shared<ua_object>(ua_node_id(0, 14156), qualified_name("DefaultApplicationGroup"), "");
    nodes["TrustList"] = std::make_shared<ua_object>(ua_node_id(0, 12642), qualified_name("TrustList"), "");
    nodes["DefaultHttpsGroup"] = std::make_shared<ua_object>(ua_node_id(0, 14088), qualified_name("DefaultHttpsGroup"), "");
    nodes["TrustList"] = std::make_shared<ua_object>(ua_node_id(0, 14089), qualified_name("TrustList"), "");
    nodes["DefaultUserTokenGroup"] = std::make_shared<ua_object>(ua_node_id(0, 14122), qualified_name("DefaultUserTokenGroup"), "");
    nodes["TrustList"] = std::make_shared<ua_object>(ua_node_id(0, 14123), qualified_name("TrustList"), "");
    nodes["AggregateConfigurationType"] = std::make_shared<ua_object_type>(ua_node_id(0, 11187), qualified_name("AggregateConfigurationType"), "");
    nodes["AggregateFunction_Interpolative"] = std::make_shared<ua_object>(ua_node_id(0, 2341), qualified_name("Interpolative"), "AggregateFunction_Interpolative");
    nodes["AggregateFunction_Average"] = std::make_shared<ua_object>(ua_node_id(0, 2342), qualified_name("Average"), "AggregateFunction_Average");
    nodes["AggregateFunction_TimeAverage"] = std::make_shared<ua_object>(ua_node_id(0, 2343), qualified_name("TimeAverage"), "AggregateFunction_TimeAverage");
    nodes["AggregateFunction_TimeAverage2"] = std::make_shared<ua_object>(ua_node_id(0, 11285), qualified_name("TimeAverage2"), "AggregateFunction_TimeAverage2");
    nodes["AggregateFunction_Total"] = std::make_shared<ua_object>(ua_node_id(0, 2344), qualified_name("Total"), "AggregateFunction_Total");
    nodes["AggregateFunction_Total2"] = std::make_shared<ua_object>(ua_node_id(0, 11304), qualified_name("Total2"), "AggregateFunction_Total2");
    nodes["AggregateFunction_Minimum"] = std::make_shared<ua_object>(ua_node_id(0, 2346), qualified_name("Minimum"), "AggregateFunction_Minimum");
    nodes["AggregateFunction_Maximum"] = std::make_shared<ua_object>(ua_node_id(0, 2347), qualified_name("Maximum"), "AggregateFunction_Maximum");
    nodes["AggregateFunction_MinimumActualTime"] = std::make_shared<ua_object>(ua_node_id(0, 2348), qualified_name("MinimumActualTime"), "AggregateFunction_MinimumActualTime");
    nodes["AggregateFunction_MaximumActualTime"] = std::make_shared<ua_object>(ua_node_id(0, 2349), qualified_name("MaximumActualTime"), "AggregateFunction_MaximumActualTime");
    nodes["AggregateFunction_Range"] = std::make_shared<ua_object>(ua_node_id(0, 2350), qualified_name("Range"), "AggregateFunction_Range");
    nodes["AggregateFunction_Minimum2"] = std::make_shared<ua_object>(ua_node_id(0, 11286), qualified_name("Minimum2"), "AggregateFunction_Minimum2");
    nodes["AggregateFunction_Maximum2"] = std::make_shared<ua_object>(ua_node_id(0, 11287), qualified_name("Maximum2"), "AggregateFunction_Maximum2");
    nodes["AggregateFunction_MinimumActualTime2"] = std::make_shared<ua_object>(ua_node_id(0, 11305), qualified_name("MinimumActualTime2"), "AggregateFunction_MinimumActualTime2");
    nodes["AggregateFunction_MaximumActualTime2"] = std::make_shared<ua_object>(ua_node_id(0, 11306), qualified_name("MaximumActualTime2"), "AggregateFunction_MaximumActualTime2");
    nodes["AggregateFunction_Range2"] = std::make_shared<ua_object>(ua_node_id(0, 11288), qualified_name("Range2"), "AggregateFunction_Range2");
    nodes["AggregateFunction_AnnotationCount"] = std::make_shared<ua_object>(ua_node_id(0, 2351), qualified_name("AnnotationCount"), "AggregateFunction_AnnotationCount");
    nodes["AggregateFunction_Count"] = std::make_shared<ua_object>(ua_node_id(0, 2352), qualified_name("Count"), "AggregateFunction_Count");
    nodes["AggregateFunction_DurationInStateZero"] = std::make_shared<ua_object>(ua_node_id(0, 11307), qualified_name("DurationInStateZero"), "AggregateFunction_DurationInStateZero");
    nodes["AggregateFunction_DurationInStateNonZero"] = std::make_shared<ua_object>(ua_node_id(0, 11308), qualified_name("DurationInStateNonZero"), "AggregateFunction_DurationInStateNonZero");
    nodes["AggregateFunction_NumberOfTransitions"] = std::make_shared<ua_object>(ua_node_id(0, 2355), qualified_name("NumberOfTransitions"), "AggregateFunction_NumberOfTransitions");
    nodes["AggregateFunction_Start"] = std::make_shared<ua_object>(ua_node_id(0, 2357), qualified_name("Start"), "AggregateFunction_Start");
    nodes["AggregateFunction_End"] = std::make_shared<ua_object>(ua_node_id(0, 2358), qualified_name("End"), "AggregateFunction_End");
    nodes["AggregateFunction_Delta"] = std::make_shared<ua_object>(ua_node_id(0, 2359), qualified_name("Delta"), "AggregateFunction_Delta");
    nodes["AggregateFunction_StartBound"] = std::make_shared<ua_object>(ua_node_id(0, 11505), qualified_name("StartBound"), "AggregateFunction_StartBound");
    nodes["AggregateFunction_EndBound"] = std::make_shared<ua_object>(ua_node_id(0, 11506), qualified_name("EndBound"), "AggregateFunction_EndBound");
    nodes["AggregateFunction_DeltaBounds"] = std::make_shared<ua_object>(ua_node_id(0, 11507), qualified_name("DeltaBounds"), "AggregateFunction_DeltaBounds");
    nodes["AggregateFunction_DurationGood"] = std::make_shared<ua_object>(ua_node_id(0, 2360), qualified_name("DurationGood"), "AggregateFunction_DurationGood");
    nodes["AggregateFunction_DurationBad"] = std::make_shared<ua_object>(ua_node_id(0, 2361), qualified_name("DurationBad"), "AggregateFunction_DurationBad");
    nodes["AggregateFunction_PercentGood"] = std::make_shared<ua_object>(ua_node_id(0, 2362), qualified_name("PercentGood"), "AggregateFunction_PercentGood");
    nodes["AggregateFunction_PercentBad"] = std::make_shared<ua_object>(ua_node_id(0, 2363), qualified_name("PercentBad"), "AggregateFunction_PercentBad");
    nodes["AggregateFunction_WorstQuality"] = std::make_shared<ua_object>(ua_node_id(0, 2364), qualified_name("WorstQuality"), "AggregateFunction_WorstQuality");
    nodes["AggregateFunction_WorstQuality2"] = std::make_shared<ua_object>(ua_node_id(0, 11292), qualified_name("WorstQuality2"), "AggregateFunction_WorstQuality2");
    nodes["AggregateFunction_StandardDeviationSample"] = std::make_shared<ua_object>(ua_node_id(0, 11426), qualified_name("StandardDeviationSample"), "AggregateFunction_StandardDeviationSample");
    nodes["AggregateFunction_StandardDeviationPopulation"] = std::make_shared<ua_object>(ua_node_id(0, 11427), qualified_name("StandardDeviationPopulation"), "AggregateFunction_StandardDeviationPopulation");
    nodes["AggregateFunction_VarianceSample"] = std::make_shared<ua_object>(ua_node_id(0, 11428), qualified_name("VarianceSample"), "AggregateFunction_VarianceSample");
    nodes["AggregateFunction_VariancePopulation"] = std::make_shared<ua_object>(ua_node_id(0, 11429), qualified_name("VariancePopulation"), "AggregateFunction_VariancePopulation");
    nodes["DefaultXml"] = std::make_shared<ua_object>(ua_node_id(0, 12676), qualified_name("Default XML"), "DefaultXml");
    nodes["DefaultXml"] = std::make_shared<ua_object>(ua_node_id(0, 297), qualified_name("Default XML"), "DefaultXml");
    nodes["DefaultXml"] = std::make_shared<ua_object>(ua_node_id(0, 7616), qualified_name("Default XML"), "DefaultXml");
    nodes["DefaultXml"] = std::make_shared<ua_object>(ua_node_id(0, 12757), qualified_name("Default XML"), "DefaultXml");
    nodes["DefaultXml"] = std::make_shared<ua_object>(ua_node_id(0, 12758), qualified_name("Default XML"), "DefaultXml");
    nodes["DefaultXml"] = std::make_shared<ua_object>(ua_node_id(0, 8913), qualified_name("Default XML"), "DefaultXml");
    nodes["DefaultXml"] = std::make_shared<ua_object>(ua_node_id(0, 309), qualified_name("Default XML"), "DefaultXml");
    nodes["DefaultXml"] = std::make_shared<ua_object>(ua_node_id(0, 12195), qualified_name("Default XML"), "DefaultXml");
    nodes["DefaultXml"] = std::make_shared<ua_object>(ua_node_id(0, 305), qualified_name("Default XML"), "DefaultXml");
    nodes["DefaultXml"] = std::make_shared<ua_object>(ua_node_id(0, 313), qualified_name("Default XML"), "DefaultXml");
    nodes["DefaultXml"] = std::make_shared<ua_object>(ua_node_id(0, 433), qualified_name("Default XML"), "DefaultXml");
    nodes["DefaultXml"] = std::make_shared<ua_object>(ua_node_id(0, 12892), qualified_name("Default XML"), "DefaultXml");
    nodes["DefaultXml"] = std::make_shared<ua_object>(ua_node_id(0, 12893), qualified_name("Default XML"), "DefaultXml");
    nodes["DefaultXml"] = std::make_shared<ua_object>(ua_node_id(0, 345), qualified_name("Default XML"), "DefaultXml");
    nodes["DefaultXml"] = std::make_shared<ua_object>(ua_node_id(0, 317), qualified_name("Default XML"), "DefaultXml");
    nodes["DefaultXml"] = std::make_shared<ua_object>(ua_node_id(0, 320), qualified_name("Default XML"), "DefaultXml");
    nodes["DefaultXml"] = std::make_shared<ua_object>(ua_node_id(0, 323), qualified_name("Default XML"), "DefaultXml");
    nodes["DefaultXml"] = std::make_shared<ua_object>(ua_node_id(0, 326), qualified_name("Default XML"), "DefaultXml");
    nodes["DefaultXml"] = std::make_shared<ua_object>(ua_node_id(0, 939), qualified_name("Default XML"), "DefaultXml");
    nodes["DefaultXml"] = std::make_shared<ua_object>(ua_node_id(0, 377), qualified_name("Default XML"), "DefaultXml");
    nodes["DefaultXml"] = std::make_shared<ua_object>(ua_node_id(0, 380), qualified_name("Default XML"), "DefaultXml");
    nodes["DefaultXml"] = std::make_shared<ua_object>(ua_node_id(0, 383), qualified_name("Default XML"), "DefaultXml");
    nodes["DefaultXml"] = std::make_shared<ua_object>(ua_node_id(0, 386), qualified_name("Default XML"), "DefaultXml");
    nodes["DefaultXml"] = std::make_shared<ua_object>(ua_node_id(0, 538), qualified_name("Default XML"), "DefaultXml");
    nodes["DefaultXml"] = std::make_shared<ua_object>(ua_node_id(0, 541), qualified_name("Default XML"), "DefaultXml");
    nodes["DefaultXml"] = std::make_shared<ua_object>(ua_node_id(0, 332), qualified_name("Default XML"), "DefaultXml");
    nodes["DefaultXml"] = std::make_shared<ua_object>(ua_node_id(0, 584), qualified_name("Default XML"), "DefaultXml");
    nodes["DefaultXml"] = std::make_shared<ua_object>(ua_node_id(0, 587), qualified_name("Default XML"), "DefaultXml");
    nodes["DefaultXml"] = std::make_shared<ua_object>(ua_node_id(0, 590), qualified_name("Default XML"), "DefaultXml");
    nodes["DefaultXml"] = std::make_shared<ua_object>(ua_node_id(0, 593), qualified_name("Default XML"), "DefaultXml");
    nodes["DefaultXml"] = std::make_shared<ua_object>(ua_node_id(0, 596), qualified_name("Default XML"), "DefaultXml");
    nodes["DefaultXml"] = std::make_shared<ua_object>(ua_node_id(0, 599), qualified_name("Default XML"), "DefaultXml");
    nodes["DefaultXml"] = std::make_shared<ua_object>(ua_node_id(0, 602), qualified_name("Default XML"), "DefaultXml");
    nodes["DefaultXml"] = std::make_shared<ua_object>(ua_node_id(0, 660), qualified_name("Default XML"), "DefaultXml");
    nodes["DefaultXml"] = std::make_shared<ua_object>(ua_node_id(0, 720), qualified_name("Default XML"), "DefaultXml");
    nodes["DefaultXml"] = std::make_shared<ua_object>(ua_node_id(0, 726), qualified_name("Default XML"), "DefaultXml");
    nodes["DefaultXml"] = std::make_shared<ua_object>(ua_node_id(0, 949), qualified_name("Default XML"), "DefaultXml");
    nodes["DefaultXml"] = std::make_shared<ua_object>(ua_node_id(0, 921), qualified_name("Default XML"), "DefaultXml");
    nodes["DefaultXml"] = std::make_shared<ua_object>(ua_node_id(0, 339), qualified_name("Default XML"), "DefaultXml");
    nodes["DefaultXml"] = std::make_shared<ua_object>(ua_node_id(0, 854), qualified_name("Default XML"), "DefaultXml");
    nodes["DefaultXml"] = std::make_shared<ua_object>(ua_node_id(0, 11949), qualified_name("Default XML"), "DefaultXml");
    nodes["DefaultXml"] = std::make_shared<ua_object>(ua_node_id(0, 11950), qualified_name("Default XML"), "DefaultXml");
    nodes["DefaultXml"] = std::make_shared<ua_object>(ua_node_id(0, 857), qualified_name("Default XML"), "DefaultXml");
    nodes["DefaultXml"] = std::make_shared<ua_object>(ua_node_id(0, 860), qualified_name("Default XML"), "DefaultXml");
    nodes["DefaultXml"] = std::make_shared<ua_object>(ua_node_id(0, 863), qualified_name("Default XML"), "DefaultXml");
    nodes["DefaultXml"] = std::make_shared<ua_object>(ua_node_id(0, 866), qualified_name("Default XML"), "DefaultXml");
    nodes["DefaultXml"] = std::make_shared<ua_object>(ua_node_id(0, 869), qualified_name("Default XML"), "DefaultXml");
    nodes["DefaultXml"] = std::make_shared<ua_object>(ua_node_id(0, 872), qualified_name("Default XML"), "DefaultXml");
    nodes["DefaultXml"] = std::make_shared<ua_object>(ua_node_id(0, 300), qualified_name("Default XML"), "DefaultXml");
    nodes["DefaultXml"] = std::make_shared<ua_object>(ua_node_id(0, 875), qualified_name("Default XML"), "DefaultXml");
    nodes["DefaultXml"] = std::make_shared<ua_object>(ua_node_id(0, 878), qualified_name("Default XML"), "DefaultXml");
    nodes["DefaultXml"] = std::make_shared<ua_object>(ua_node_id(0, 898), qualified_name("Default XML"), "DefaultXml");
    nodes["DefaultXml"] = std::make_shared<ua_object>(ua_node_id(0, 885), qualified_name("Default XML"), "DefaultXml");
    nodes["DefaultXml"] = std::make_shared<ua_object>(ua_node_id(0, 888), qualified_name("Default XML"), "DefaultXml");
    nodes["DefaultXml"] = std::make_shared<ua_object>(ua_node_id(0, 12173), qualified_name("Default XML"), "DefaultXml");
    nodes["DefaultXml"] = std::make_shared<ua_object>(ua_node_id(0, 12174), qualified_name("Default XML"), "DefaultXml");
    nodes["DefaultXml"] = std::make_shared<ua_object>(ua_node_id(0, 12081), qualified_name("Default XML"), "DefaultXml");
    nodes["DefaultXml"] = std::make_shared<ua_object>(ua_node_id(0, 12082), qualified_name("Default XML"), "DefaultXml");
    nodes["DefaultXml"] = std::make_shared<ua_object>(ua_node_id(0, 895), qualified_name("Default XML"), "DefaultXml");
    nodes["DefaultXml"] = std::make_shared<ua_object>(ua_node_id(0, 892), qualified_name("Default XML"), "DefaultXml");
    nodes["DefaultBinary"] = std::make_shared<ua_object>(ua_node_id(0, 12680), qualified_name("Default Binary"), "DefaultBinary");
    nodes["DefaultBinary"] = std::make_shared<ua_object>(ua_node_id(0, 298), qualified_name("Default Binary"), "DefaultBinary");
    nodes["DefaultBinary"] = std::make_shared<ua_object>(ua_node_id(0, 8251), qualified_name("Default Binary"), "DefaultBinary");
    nodes["DefaultBinary"] = std::make_shared<ua_object>(ua_node_id(0, 12765), qualified_name("Default Binary"), "DefaultBinary");
    nodes["DefaultBinary"] = std::make_shared<ua_object>(ua_node_id(0, 12766), qualified_name("Default Binary"), "DefaultBinary");
    nodes["DefaultBinary"] = std::make_shared<ua_object>(ua_node_id(0, 8917), qualified_name("Default Binary"), "DefaultBinary");
    nodes["DefaultBinary"] = std::make_shared<ua_object>(ua_node_id(0, 310), qualified_name("Default Binary"), "DefaultBinary");
    nodes["DefaultBinary"] = std::make_shared<ua_object>(ua_node_id(0, 12207), qualified_name("Default Binary"), "DefaultBinary");
    nodes["DefaultBinary"] = std::make_shared<ua_object>(ua_node_id(0, 306), qualified_name("Default Binary"), "DefaultBinary");
    nodes["DefaultBinary"] = std::make_shared<ua_object>(ua_node_id(0, 314), qualified_name("Default Binary"), "DefaultBinary");
    nodes["DefaultBinary"] = std::make_shared<ua_object>(ua_node_id(0, 434), qualified_name("Default Binary"), "DefaultBinary");
    nodes["DefaultBinary"] = std::make_shared<ua_object>(ua_node_id(0, 12900), qualified_name("Default Binary"), "DefaultBinary");
    nodes["DefaultBinary"] = std::make_shared<ua_object>(ua_node_id(0, 12901), qualified_name("Default Binary"), "DefaultBinary");
    nodes["DefaultBinary"] = std::make_shared<ua_object>(ua_node_id(0, 346), qualified_name("Default Binary"), "DefaultBinary");
    nodes["DefaultBinary"] = std::make_shared<ua_object>(ua_node_id(0, 318), qualified_name("Default Binary"), "DefaultBinary");
    nodes["DefaultBinary"] = std::make_shared<ua_object>(ua_node_id(0, 321), qualified_name("Default Binary"), "DefaultBinary");
    nodes["DefaultBinary"] = std::make_shared<ua_object>(ua_node_id(0, 324), qualified_name("Default Binary"), "DefaultBinary");
    nodes["DefaultBinary"] = std::make_shared<ua_object>(ua_node_id(0, 327), qualified_name("Default Binary"), "DefaultBinary");
    nodes["DefaultBinary"] = std::make_shared<ua_object>(ua_node_id(0, 940), qualified_name("Default Binary"), "DefaultBinary");
    nodes["DefaultBinary"] = std::make_shared<ua_object>(ua_node_id(0, 378), qualified_name("Default Binary"), "DefaultBinary");
    nodes["DefaultBinary"] = std::make_shared<ua_object>(ua_node_id(0, 381), qualified_name("Default Binary"), "DefaultBinary");
    nodes["DefaultBinary"] = std::make_shared<ua_object>(ua_node_id(0, 384), qualified_name("Default Binary"), "DefaultBinary");
    nodes["DefaultBinary"] = std::make_shared<ua_object>(ua_node_id(0, 387), qualified_name("Default Binary"), "DefaultBinary");
    nodes["DefaultBinary"] = std::make_shared<ua_object>(ua_node_id(0, 539), qualified_name("Default Binary"), "DefaultBinary");
    nodes["DefaultBinary"] = std::make_shared<ua_object>(ua_node_id(0, 542), qualified_name("Default Binary"), "DefaultBinary");
    nodes["DefaultBinary"] = std::make_shared<ua_object>(ua_node_id(0, 333), qualified_name("Default Binary"), "DefaultBinary");
    nodes["DefaultBinary"] = std::make_shared<ua_object>(ua_node_id(0, 585), qualified_name("Default Binary"), "DefaultBinary");
    nodes["DefaultBinary"] = std::make_shared<ua_object>(ua_node_id(0, 588), qualified_name("Default Binary"), "DefaultBinary");
    nodes["DefaultBinary"] = std::make_shared<ua_object>(ua_node_id(0, 591), qualified_name("Default Binary"), "DefaultBinary");
    nodes["DefaultBinary"] = std::make_shared<ua_object>(ua_node_id(0, 594), qualified_name("Default Binary"), "DefaultBinary");
    nodes["DefaultBinary"] = std::make_shared<ua_object>(ua_node_id(0, 597), qualified_name("Default Binary"), "DefaultBinary");
    nodes["DefaultBinary"] = std::make_shared<ua_object>(ua_node_id(0, 600), qualified_name("Default Binary"), "DefaultBinary");
    nodes["DefaultBinary"] = std::make_shared<ua_object>(ua_node_id(0, 603), qualified_name("Default Binary"), "DefaultBinary");
    nodes["DefaultBinary"] = std::make_shared<ua_object>(ua_node_id(0, 661), qualified_name("Default Binary"), "DefaultBinary");
    nodes["DefaultBinary"] = std::make_shared<ua_object>(ua_node_id(0, 721), qualified_name("Default Binary"), "DefaultBinary");
    nodes["DefaultBinary"] = std::make_shared<ua_object>(ua_node_id(0, 727), qualified_name("Default Binary"), "DefaultBinary");
    nodes["DefaultBinary"] = std::make_shared<ua_object>(ua_node_id(0, 950), qualified_name("Default Binary"), "DefaultBinary");
    nodes["DefaultBinary"] = std::make_shared<ua_object>(ua_node_id(0, 922), qualified_name("Default Binary"), "DefaultBinary");
    nodes["DefaultBinary"] = std::make_shared<ua_object>(ua_node_id(0, 340), qualified_name("Default Binary"), "DefaultBinary");
    nodes["DefaultBinary"] = std::make_shared<ua_object>(ua_node_id(0, 855), qualified_name("Default Binary"), "DefaultBinary");
    nodes["DefaultBinary"] = std::make_shared<ua_object>(ua_node_id(0, 11957), qualified_name("Default Binary"), "DefaultBinary");
    nodes["DefaultBinary"] = std::make_shared<ua_object>(ua_node_id(0, 11958), qualified_name("Default Binary"), "DefaultBinary");
    nodes["DefaultBinary"] = std::make_shared<ua_object>(ua_node_id(0, 858), qualified_name("Default Binary"), "DefaultBinary");
    nodes["DefaultBinary"] = std::make_shared<ua_object>(ua_node_id(0, 861), qualified_name("Default Binary"), "DefaultBinary");
    nodes["DefaultBinary"] = std::make_shared<ua_object>(ua_node_id(0, 864), qualified_name("Default Binary"), "DefaultBinary");
    nodes["DefaultBinary"] = std::make_shared<ua_object>(ua_node_id(0, 867), qualified_name("Default Binary"), "DefaultBinary");
    nodes["DefaultBinary"] = std::make_shared<ua_object>(ua_node_id(0, 870), qualified_name("Default Binary"), "DefaultBinary");
    nodes["DefaultBinary"] = std::make_shared<ua_object>(ua_node_id(0, 873), qualified_name("Default Binary"), "DefaultBinary");
    nodes["DefaultBinary"] = std::make_shared<ua_object>(ua_node_id(0, 301), qualified_name("Default Binary"), "DefaultBinary");
    nodes["DefaultBinary"] = std::make_shared<ua_object>(ua_node_id(0, 876), qualified_name("Default Binary"), "DefaultBinary");
    nodes["DefaultBinary"] = std::make_shared<ua_object>(ua_node_id(0, 879), qualified_name("Default Binary"), "DefaultBinary");
    nodes["DefaultBinary"] = std::make_shared<ua_object>(ua_node_id(0, 899), qualified_name("Default Binary"), "DefaultBinary");
    nodes["DefaultBinary"] = std::make_shared<ua_object>(ua_node_id(0, 886), qualified_name("Default Binary"), "DefaultBinary");
    nodes["DefaultBinary"] = std::make_shared<ua_object>(ua_node_id(0, 889), qualified_name("Default Binary"), "DefaultBinary");
    nodes["DefaultBinary"] = std::make_shared<ua_object>(ua_node_id(0, 12181), qualified_name("Default Binary"), "DefaultBinary");
    nodes["DefaultBinary"] = std::make_shared<ua_object>(ua_node_id(0, 12182), qualified_name("Default Binary"), "DefaultBinary");
    nodes["DefaultBinary"] = std::make_shared<ua_object>(ua_node_id(0, 12089), qualified_name("Default Binary"), "DefaultBinary");
    nodes["DefaultBinary"] = std::make_shared<ua_object>(ua_node_id(0, 12090), qualified_name("Default Binary"), "DefaultBinary");
    nodes["DefaultBinary"] = std::make_shared<ua_object>(ua_node_id(0, 896), qualified_name("Default Binary"), "DefaultBinary");
    nodes["DefaultBinary"] = std::make_shared<ua_object>(ua_node_id(0, 893), qualified_name("Default Binary"), "DefaultBinary");
}
