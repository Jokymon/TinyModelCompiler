#include "opc_ua_nodeset2.h"
#include "ua_model.h"

void populate_node_list(std::map<std::string, std::unique_ptr<ua_node>> &nodes)
{
    nodes["BaseObjectType"] = std::make_unique<ua_object_type>(ua_node_id(0, 58), qualified_name("BaseObjectType"), "BaseObjectType");
    nodes["FolderType"] = std::make_unique<ua_object_type>(ua_node_id(0, 61), qualified_name("FolderType"), "FolderType");
    nodes["BaseVariableType"] = std::make_unique<ua_variable_type>(ua_node_id(0, 62), qualified_name("BaseVariableType"), "BaseVariableType");
    nodes["BaseDataVariableType"] = std::make_unique<ua_variable_type>(ua_node_id(0, 63), qualified_name("BaseDataVariableType"), "BaseDataVariableType");
    nodes["PropertyType"] = std::make_unique<ua_variable_type>(ua_node_id(0, 68), qualified_name("PropertyType"), "PropertyType");
    nodes["DataTypeDescriptionType"] = std::make_unique<ua_variable_type>(ua_node_id(0, 69), qualified_name("DataTypeDescriptionType"), "DataTypeDescriptionType");
    nodes["DataTypeDictionaryType"] = std::make_unique<ua_variable_type>(ua_node_id(0, 72), qualified_name("DataTypeDictionaryType"), "DataTypeDictionaryType");
    nodes["DataTypeSystemType"] = std::make_unique<ua_object_type>(ua_node_id(0, 75), qualified_name("DataTypeSystemType"), "DataTypeSystemType");
    nodes["DataTypeEncodingType"] = std::make_unique<ua_object_type>(ua_node_id(0, 76), qualified_name("DataTypeEncodingType"), "DataTypeEncodingType");
    nodes["ModellingRuleType"] = std::make_unique<ua_object_type>(ua_node_id(0, 77), qualified_name("ModellingRuleType"), "ModellingRuleType");
    nodes["ServerType"] = std::make_unique<ua_object_type>(ua_node_id(0, 2004), qualified_name("ServerType"), "ServerType");
    nodes["ServerCapabilitiesType"] = std::make_unique<ua_object_type>(ua_node_id(0, 2013), qualified_name("ServerCapabilitiesType"), "ServerCapabilitiesType");
    nodes["ServerDiagnosticsType"] = std::make_unique<ua_object_type>(ua_node_id(0, 2020), qualified_name("ServerDiagnosticsType"), "ServerDiagnosticsType");
    nodes["SessionsDiagnosticsSummaryType"] = std::make_unique<ua_object_type>(ua_node_id(0, 2026), qualified_name("SessionsDiagnosticsSummaryType"), "SessionsDiagnosticsSummaryType");
    nodes["SessionDiagnosticsObjectType"] = std::make_unique<ua_object_type>(ua_node_id(0, 2029), qualified_name("SessionDiagnosticsObjectType"), "SessionDiagnosticsObjectType");
    nodes["VendorServerInfoType"] = std::make_unique<ua_object_type>(ua_node_id(0, 2033), qualified_name("VendorServerInfoType"), "VendorServerInfoType");
    nodes["ServerRedundancyType"] = std::make_unique<ua_object_type>(ua_node_id(0, 2034), qualified_name("ServerRedundancyType"), "ServerRedundancyType");
    nodes["TransparentRedundancyType"] = std::make_unique<ua_object_type>(ua_node_id(0, 2036), qualified_name("TransparentRedundancyType"), "TransparentRedundancyType");
    nodes["NonTransparentRedundancyType"] = std::make_unique<ua_object_type>(ua_node_id(0, 2039), qualified_name("NonTransparentRedundancyType"), "NonTransparentRedundancyType");
    nodes["NonTransparentNetworkRedundancyType"] = std::make_unique<ua_object_type>(ua_node_id(0, 11945), qualified_name("NonTransparentNetworkRedundancyType"), "NonTransparentNetworkRedundancyType");
    nodes["OperationLimitsType"] = std::make_unique<ua_object_type>(ua_node_id(0, 11564), qualified_name("OperationLimitsType"), "OperationLimitsType");
    nodes["FileType"] = std::make_unique<ua_object_type>(ua_node_id(0, 11575), qualified_name("FileType"), "FileType");
    nodes["FileDirectoryType"] = std::make_unique<ua_object_type>(ua_node_id(0, 13353), qualified_name("FileDirectoryType"), "FileDirectoryType");
    nodes["AddressSpaceFileType"] = std::make_unique<ua_object_type>(ua_node_id(0, 11595), qualified_name("AddressSpaceFileType"), "AddressSpaceFileType");
    nodes["NamespaceMetadataType"] = std::make_unique<ua_object_type>(ua_node_id(0, 11616), qualified_name("NamespaceMetadataType"), "NamespaceMetadataType");
    nodes["NamespacesType"] = std::make_unique<ua_object_type>(ua_node_id(0, 11645), qualified_name("NamespacesType"), "NamespacesType");
    nodes["BaseEventType"] = std::make_unique<ua_object_type>(ua_node_id(0, 2041), qualified_name("BaseEventType"), "BaseEventType");
    nodes["AuditEventType"] = std::make_unique<ua_object_type>(ua_node_id(0, 2052), qualified_name("AuditEventType"), "AuditEventType");
    nodes["AuditSecurityEventType"] = std::make_unique<ua_object_type>(ua_node_id(0, 2058), qualified_name("AuditSecurityEventType"), "AuditSecurityEventType");
    nodes["AuditChannelEventType"] = std::make_unique<ua_object_type>(ua_node_id(0, 2059), qualified_name("AuditChannelEventType"), "AuditChannelEventType");
    nodes["AuditOpenSecureChannelEventType"] = std::make_unique<ua_object_type>(ua_node_id(0, 2060), qualified_name("AuditOpenSecureChannelEventType"), "AuditOpenSecureChannelEventType");
    nodes["AuditSessionEventType"] = std::make_unique<ua_object_type>(ua_node_id(0, 2069), qualified_name("AuditSessionEventType"), "AuditSessionEventType");
    nodes["AuditCreateSessionEventType"] = std::make_unique<ua_object_type>(ua_node_id(0, 2071), qualified_name("AuditCreateSessionEventType"), "AuditCreateSessionEventType");
    nodes["AuditUrlMismatchEventType"] = std::make_unique<ua_object_type>(ua_node_id(0, 2748), qualified_name("AuditUrlMismatchEventType"), "AuditUrlMismatchEventType");
    nodes["AuditActivateSessionEventType"] = std::make_unique<ua_object_type>(ua_node_id(0, 2075), qualified_name("AuditActivateSessionEventType"), "AuditActivateSessionEventType");
    nodes["AuditCancelEventType"] = std::make_unique<ua_object_type>(ua_node_id(0, 2078), qualified_name("AuditCancelEventType"), "AuditCancelEventType");
    nodes["AuditCertificateEventType"] = std::make_unique<ua_object_type>(ua_node_id(0, 2080), qualified_name("AuditCertificateEventType"), "AuditCertificateEventType");
    nodes["AuditCertificateDataMismatchEventType"] = std::make_unique<ua_object_type>(ua_node_id(0, 2082), qualified_name("AuditCertificateDataMismatchEventType"), "AuditCertificateDataMismatchEventType");
    nodes["AuditCertificateExpiredEventType"] = std::make_unique<ua_object_type>(ua_node_id(0, 2085), qualified_name("AuditCertificateExpiredEventType"), "AuditCertificateExpiredEventType");
    nodes["AuditCertificateInvalidEventType"] = std::make_unique<ua_object_type>(ua_node_id(0, 2086), qualified_name("AuditCertificateInvalidEventType"), "AuditCertificateInvalidEventType");
    nodes["AuditCertificateUntrustedEventType"] = std::make_unique<ua_object_type>(ua_node_id(0, 2087), qualified_name("AuditCertificateUntrustedEventType"), "AuditCertificateUntrustedEventType");
    nodes["AuditCertificateRevokedEventType"] = std::make_unique<ua_object_type>(ua_node_id(0, 2088), qualified_name("AuditCertificateRevokedEventType"), "AuditCertificateRevokedEventType");
    nodes["AuditCertificateMismatchEventType"] = std::make_unique<ua_object_type>(ua_node_id(0, 2089), qualified_name("AuditCertificateMismatchEventType"), "AuditCertificateMismatchEventType");
    nodes["AuditNodeManagementEventType"] = std::make_unique<ua_object_type>(ua_node_id(0, 2090), qualified_name("AuditNodeManagementEventType"), "AuditNodeManagementEventType");
    nodes["AuditAddNodesEventType"] = std::make_unique<ua_object_type>(ua_node_id(0, 2091), qualified_name("AuditAddNodesEventType"), "AuditAddNodesEventType");
    nodes["AuditDeleteNodesEventType"] = std::make_unique<ua_object_type>(ua_node_id(0, 2093), qualified_name("AuditDeleteNodesEventType"), "AuditDeleteNodesEventType");
    nodes["AuditAddReferencesEventType"] = std::make_unique<ua_object_type>(ua_node_id(0, 2095), qualified_name("AuditAddReferencesEventType"), "AuditAddReferencesEventType");
    nodes["AuditDeleteReferencesEventType"] = std::make_unique<ua_object_type>(ua_node_id(0, 2097), qualified_name("AuditDeleteReferencesEventType"), "AuditDeleteReferencesEventType");
    nodes["AuditUpdateEventType"] = std::make_unique<ua_object_type>(ua_node_id(0, 2099), qualified_name("AuditUpdateEventType"), "AuditUpdateEventType");
    nodes["AuditWriteUpdateEventType"] = std::make_unique<ua_object_type>(ua_node_id(0, 2100), qualified_name("AuditWriteUpdateEventType"), "AuditWriteUpdateEventType");
    nodes["AuditHistoryUpdateEventType"] = std::make_unique<ua_object_type>(ua_node_id(0, 2104), qualified_name("AuditHistoryUpdateEventType"), "AuditHistoryUpdateEventType");
    nodes["AuditUpdateMethodEventType"] = std::make_unique<ua_object_type>(ua_node_id(0, 2127), qualified_name("AuditUpdateMethodEventType"), "AuditUpdateMethodEventType");
    nodes["SystemEventType"] = std::make_unique<ua_object_type>(ua_node_id(0, 2130), qualified_name("SystemEventType"), "SystemEventType");
    nodes["DeviceFailureEventType"] = std::make_unique<ua_object_type>(ua_node_id(0, 2131), qualified_name("DeviceFailureEventType"), "DeviceFailureEventType");
    nodes["SystemStatusChangeEventType"] = std::make_unique<ua_object_type>(ua_node_id(0, 11446), qualified_name("SystemStatusChangeEventType"), "SystemStatusChangeEventType");
    nodes["BaseModelChangeEventType"] = std::make_unique<ua_object_type>(ua_node_id(0, 2132), qualified_name("BaseModelChangeEventType"), "BaseModelChangeEventType");
    nodes["GeneralModelChangeEventType"] = std::make_unique<ua_object_type>(ua_node_id(0, 2133), qualified_name("GeneralModelChangeEventType"), "GeneralModelChangeEventType");
    nodes["SemanticChangeEventType"] = std::make_unique<ua_object_type>(ua_node_id(0, 2738), qualified_name("SemanticChangeEventType"), "SemanticChangeEventType");
    nodes["EventQueueOverflowEventType"] = std::make_unique<ua_object_type>(ua_node_id(0, 3035), qualified_name("EventQueueOverflowEventType"), "EventQueueOverflowEventType");
    nodes["ProgressEventType"] = std::make_unique<ua_object_type>(ua_node_id(0, 11436), qualified_name("ProgressEventType"), "ProgressEventType");
    nodes["AggregateFunctionType"] = std::make_unique<ua_object_type>(ua_node_id(0, 2340), qualified_name("AggregateFunctionType"), "AggregateFunctionType");
    nodes["ServerVendorCapabilityType"] = std::make_unique<ua_variable_type>(ua_node_id(0, 2137), qualified_name("ServerVendorCapabilityType"), "ServerVendorCapabilityType");
    nodes["ServerStatusType"] = std::make_unique<ua_variable_type>(ua_node_id(0, 2138), qualified_name("ServerStatusType"), "ServerStatusType");
    nodes["BuildInfoType"] = std::make_unique<ua_variable_type>(ua_node_id(0, 3051), qualified_name("BuildInfoType"), "BuildInfoType");
    nodes["ServerDiagnosticsSummaryType"] = std::make_unique<ua_variable_type>(ua_node_id(0, 2150), qualified_name("ServerDiagnosticsSummaryType"), "ServerDiagnosticsSummaryType");
    nodes["SamplingIntervalDiagnosticsArrayType"] = std::make_unique<ua_variable_type>(ua_node_id(0, 2164), qualified_name("SamplingIntervalDiagnosticsArrayType"), "SamplingIntervalDiagnosticsArrayType");
    nodes["SamplingIntervalDiagnosticsType"] = std::make_unique<ua_variable_type>(ua_node_id(0, 2165), qualified_name("SamplingIntervalDiagnosticsType"), "SamplingIntervalDiagnosticsType");
    nodes["SubscriptionDiagnosticsArrayType"] = std::make_unique<ua_variable_type>(ua_node_id(0, 2171), qualified_name("SubscriptionDiagnosticsArrayType"), "SubscriptionDiagnosticsArrayType");
    nodes["SubscriptionDiagnosticsType"] = std::make_unique<ua_variable_type>(ua_node_id(0, 2172), qualified_name("SubscriptionDiagnosticsType"), "SubscriptionDiagnosticsType");
    nodes["SessionDiagnosticsArrayType"] = std::make_unique<ua_variable_type>(ua_node_id(0, 2196), qualified_name("SessionDiagnosticsArrayType"), "SessionDiagnosticsArrayType");
    nodes["SessionDiagnosticsVariableType"] = std::make_unique<ua_variable_type>(ua_node_id(0, 2197), qualified_name("SessionDiagnosticsVariableType"), "SessionDiagnosticsVariableType");
    nodes["SessionSecurityDiagnosticsArrayType"] = std::make_unique<ua_variable_type>(ua_node_id(0, 2243), qualified_name("SessionSecurityDiagnosticsArrayType"), "SessionSecurityDiagnosticsArrayType");
    nodes["SessionSecurityDiagnosticsType"] = std::make_unique<ua_variable_type>(ua_node_id(0, 2244), qualified_name("SessionSecurityDiagnosticsType"), "SessionSecurityDiagnosticsType");
    nodes["OptionSetType"] = std::make_unique<ua_variable_type>(ua_node_id(0, 11487), qualified_name("OptionSetType"), "OptionSetType");
    nodes["StateMachineType"] = std::make_unique<ua_object_type>(ua_node_id(0, 2299), qualified_name("StateMachineType"), "StateMachineType");
    nodes["StateVariableType"] = std::make_unique<ua_variable_type>(ua_node_id(0, 2755), qualified_name("StateVariableType"), "StateVariableType");
    nodes["TransitionVariableType"] = std::make_unique<ua_variable_type>(ua_node_id(0, 2762), qualified_name("TransitionVariableType"), "TransitionVariableType");
    nodes["FiniteStateMachineType"] = std::make_unique<ua_object_type>(ua_node_id(0, 2771), qualified_name("FiniteStateMachineType"), "FiniteStateMachineType");
    nodes["FiniteStateVariableType"] = std::make_unique<ua_variable_type>(ua_node_id(0, 2760), qualified_name("FiniteStateVariableType"), "FiniteStateVariableType");
    nodes["FiniteTransitionVariableType"] = std::make_unique<ua_variable_type>(ua_node_id(0, 2767), qualified_name("FiniteTransitionVariableType"), "FiniteTransitionVariableType");
    nodes["StateType"] = std::make_unique<ua_object_type>(ua_node_id(0, 2307), qualified_name("StateType"), "StateType");
    nodes["InitialStateType"] = std::make_unique<ua_object_type>(ua_node_id(0, 2309), qualified_name("InitialStateType"), "InitialStateType");
    nodes["TransitionType"] = std::make_unique<ua_object_type>(ua_node_id(0, 2310), qualified_name("TransitionType"), "TransitionType");
    nodes["TransitionEventType"] = std::make_unique<ua_object_type>(ua_node_id(0, 2311), qualified_name("TransitionEventType"), "TransitionEventType");
    nodes["AuditUpdateStateEventType"] = std::make_unique<ua_object_type>(ua_node_id(0, 2315), qualified_name("AuditUpdateStateEventType"), "AuditUpdateStateEventType");
    nodes["DataItemType"] = std::make_unique<ua_variable_type>(ua_node_id(0, 2365), qualified_name("DataItemType"), "DataItemType");
    nodes["AnalogItemType"] = std::make_unique<ua_variable_type>(ua_node_id(0, 2368), qualified_name("AnalogItemType"), "AnalogItemType");
    nodes["DiscreteItemType"] = std::make_unique<ua_variable_type>(ua_node_id(0, 2372), qualified_name("DiscreteItemType"), "DiscreteItemType");
    nodes["TwoStateDiscreteType"] = std::make_unique<ua_variable_type>(ua_node_id(0, 2373), qualified_name("TwoStateDiscreteType"), "TwoStateDiscreteType");
    nodes["MultiStateDiscreteType"] = std::make_unique<ua_variable_type>(ua_node_id(0, 2376), qualified_name("MultiStateDiscreteType"), "MultiStateDiscreteType");
    nodes["MultiStateValueDiscreteType"] = std::make_unique<ua_variable_type>(ua_node_id(0, 11238), qualified_name("MultiStateValueDiscreteType"), "MultiStateValueDiscreteType");
    nodes["ArrayItemType"] = std::make_unique<ua_variable_type>(ua_node_id(0, 12021), qualified_name("ArrayItemType"), "ArrayItemType");
    nodes["YArrayItemType"] = std::make_unique<ua_variable_type>(ua_node_id(0, 12029), qualified_name("YArrayItemType"), "YArrayItemType");
    nodes["XYArrayItemType"] = std::make_unique<ua_variable_type>(ua_node_id(0, 12038), qualified_name("XYArrayItemType"), "XYArrayItemType");
    nodes["ImageItemType"] = std::make_unique<ua_variable_type>(ua_node_id(0, 12047), qualified_name("ImageItemType"), "ImageItemType");
    nodes["CubeItemType"] = std::make_unique<ua_variable_type>(ua_node_id(0, 12057), qualified_name("CubeItemType"), "CubeItemType");
    nodes["NDimensionArrayItemType"] = std::make_unique<ua_variable_type>(ua_node_id(0, 12068), qualified_name("NDimensionArrayItemType"), "NDimensionArrayItemType");
    nodes["TwoStateVariableType"] = std::make_unique<ua_variable_type>(ua_node_id(0, 8995), qualified_name("TwoStateVariableType"), "TwoStateVariableType");
    nodes["ConditionVariableType"] = std::make_unique<ua_variable_type>(ua_node_id(0, 9002), qualified_name("ConditionVariableType"), "ConditionVariableType");
    nodes["ConditionType"] = std::make_unique<ua_object_type>(ua_node_id(0, 2782), qualified_name("ConditionType"), "ConditionType");
    nodes["DialogConditionType"] = std::make_unique<ua_object_type>(ua_node_id(0, 2830), qualified_name("DialogConditionType"), "DialogConditionType");
    nodes["AcknowledgeableConditionType"] = std::make_unique<ua_object_type>(ua_node_id(0, 2881), qualified_name("AcknowledgeableConditionType"), "AcknowledgeableConditionType");
    nodes["AlarmConditionType"] = std::make_unique<ua_object_type>(ua_node_id(0, 2915), qualified_name("AlarmConditionType"), "AlarmConditionType");
    nodes["ShelvedStateMachineType"] = std::make_unique<ua_object_type>(ua_node_id(0, 2929), qualified_name("ShelvedStateMachineType"), "ShelvedStateMachineType");
    nodes["LimitAlarmType"] = std::make_unique<ua_object_type>(ua_node_id(0, 2955), qualified_name("LimitAlarmType"), "LimitAlarmType");
    nodes["ExclusiveLimitStateMachineType"] = std::make_unique<ua_object_type>(ua_node_id(0, 9318), qualified_name("ExclusiveLimitStateMachineType"), "ExclusiveLimitStateMachineType");
    nodes["ExclusiveLimitAlarmType"] = std::make_unique<ua_object_type>(ua_node_id(0, 9341), qualified_name("ExclusiveLimitAlarmType"), "ExclusiveLimitAlarmType");
    nodes["NonExclusiveLimitAlarmType"] = std::make_unique<ua_object_type>(ua_node_id(0, 9906), qualified_name("NonExclusiveLimitAlarmType"), "NonExclusiveLimitAlarmType");
    nodes["NonExclusiveLevelAlarmType"] = std::make_unique<ua_object_type>(ua_node_id(0, 10060), qualified_name("NonExclusiveLevelAlarmType"), "NonExclusiveLevelAlarmType");
    nodes["ExclusiveLevelAlarmType"] = std::make_unique<ua_object_type>(ua_node_id(0, 9482), qualified_name("ExclusiveLevelAlarmType"), "ExclusiveLevelAlarmType");
    nodes["NonExclusiveDeviationAlarmType"] = std::make_unique<ua_object_type>(ua_node_id(0, 10368), qualified_name("NonExclusiveDeviationAlarmType"), "NonExclusiveDeviationAlarmType");
    nodes["ExclusiveDeviationAlarmType"] = std::make_unique<ua_object_type>(ua_node_id(0, 9764), qualified_name("ExclusiveDeviationAlarmType"), "ExclusiveDeviationAlarmType");
    nodes["NonExclusiveRateOfChangeAlarmType"] = std::make_unique<ua_object_type>(ua_node_id(0, 10214), qualified_name("NonExclusiveRateOfChangeAlarmType"), "NonExclusiveRateOfChangeAlarmType");
    nodes["ExclusiveRateOfChangeAlarmType"] = std::make_unique<ua_object_type>(ua_node_id(0, 9623), qualified_name("ExclusiveRateOfChangeAlarmType"), "ExclusiveRateOfChangeAlarmType");
    nodes["DiscreteAlarmType"] = std::make_unique<ua_object_type>(ua_node_id(0, 10523), qualified_name("DiscreteAlarmType"), "DiscreteAlarmType");
    nodes["OffNormalAlarmType"] = std::make_unique<ua_object_type>(ua_node_id(0, 10637), qualified_name("OffNormalAlarmType"), "OffNormalAlarmType");
    nodes["SystemOffNormalAlarmType"] = std::make_unique<ua_object_type>(ua_node_id(0, 11753), qualified_name("SystemOffNormalAlarmType"), "SystemOffNormalAlarmType");
    nodes["CertificateExpirationAlarmType"] = std::make_unique<ua_object_type>(ua_node_id(0, 13225), qualified_name("CertificateExpirationAlarmType"), "CertificateExpirationAlarmType");
    nodes["TripAlarmType"] = std::make_unique<ua_object_type>(ua_node_id(0, 10751), qualified_name("TripAlarmType"), "TripAlarmType");
    nodes["BaseConditionClassType"] = std::make_unique<ua_object_type>(ua_node_id(0, 11163), qualified_name("BaseConditionClassType"), "BaseConditionClassType");
    nodes["ProcessConditionClassType"] = std::make_unique<ua_object_type>(ua_node_id(0, 11164), qualified_name("ProcessConditionClassType"), "ProcessConditionClassType");
    nodes["MaintenanceConditionClassType"] = std::make_unique<ua_object_type>(ua_node_id(0, 11165), qualified_name("MaintenanceConditionClassType"), "MaintenanceConditionClassType");
    nodes["SystemConditionClassType"] = std::make_unique<ua_object_type>(ua_node_id(0, 11166), qualified_name("SystemConditionClassType"), "SystemConditionClassType");
    nodes["AuditConditionEventType"] = std::make_unique<ua_object_type>(ua_node_id(0, 2790), qualified_name("AuditConditionEventType"), "AuditConditionEventType");
    nodes["AuditConditionEnableEventType"] = std::make_unique<ua_object_type>(ua_node_id(0, 2803), qualified_name("AuditConditionEnableEventType"), "AuditConditionEnableEventType");
    nodes["AuditConditionCommentEventType"] = std::make_unique<ua_object_type>(ua_node_id(0, 2829), qualified_name("AuditConditionCommentEventType"), "AuditConditionCommentEventType");
    nodes["AuditConditionRespondEventType"] = std::make_unique<ua_object_type>(ua_node_id(0, 8927), qualified_name("AuditConditionRespondEventType"), "AuditConditionRespondEventType");
    nodes["AuditConditionAcknowledgeEventType"] = std::make_unique<ua_object_type>(ua_node_id(0, 8944), qualified_name("AuditConditionAcknowledgeEventType"), "AuditConditionAcknowledgeEventType");
    nodes["AuditConditionConfirmEventType"] = std::make_unique<ua_object_type>(ua_node_id(0, 8961), qualified_name("AuditConditionConfirmEventType"), "AuditConditionConfirmEventType");
    nodes["AuditConditionShelvingEventType"] = std::make_unique<ua_object_type>(ua_node_id(0, 11093), qualified_name("AuditConditionShelvingEventType"), "AuditConditionShelvingEventType");
    nodes["RefreshStartEventType"] = std::make_unique<ua_object_type>(ua_node_id(0, 2787), qualified_name("RefreshStartEventType"), "RefreshStartEventType");
    nodes["RefreshEndEventType"] = std::make_unique<ua_object_type>(ua_node_id(0, 2788), qualified_name("RefreshEndEventType"), "RefreshEndEventType");
    nodes["RefreshRequiredEventType"] = std::make_unique<ua_object_type>(ua_node_id(0, 2789), qualified_name("RefreshRequiredEventType"), "RefreshRequiredEventType");
    nodes["ProgramStateMachineType"] = std::make_unique<ua_object_type>(ua_node_id(0, 2391), qualified_name("ProgramStateMachineType"), "ProgramStateMachineType");
    nodes["ProgramTransitionEventType"] = std::make_unique<ua_object_type>(ua_node_id(0, 2378), qualified_name("ProgramTransitionEventType"), "ProgramTransitionEventType");
    nodes["AuditProgramTransitionEventType"] = std::make_unique<ua_object_type>(ua_node_id(0, 11856), qualified_name("AuditProgramTransitionEventType"), "AuditProgramTransitionEventType");
    nodes["ProgramTransitionAuditEventType"] = std::make_unique<ua_object_type>(ua_node_id(0, 3806), qualified_name("ProgramTransitionAuditEventType"), "ProgramTransitionAuditEventType");
    nodes["ProgramDiagnosticType"] = std::make_unique<ua_variable_type>(ua_node_id(0, 2380), qualified_name("ProgramDiagnosticType"), "ProgramDiagnosticType");
    nodes["HistoricalDataConfigurationType"] = std::make_unique<ua_object_type>(ua_node_id(0, 2318), qualified_name("HistoricalDataConfigurationType"), "HistoricalDataConfigurationType");
    nodes["HistoryServerCapabilitiesType"] = std::make_unique<ua_object_type>(ua_node_id(0, 2330), qualified_name("HistoryServerCapabilitiesType"), "HistoryServerCapabilitiesType");
    nodes["AuditHistoryEventUpdateEventType"] = std::make_unique<ua_object_type>(ua_node_id(0, 2999), qualified_name("AuditHistoryEventUpdateEventType"), "AuditHistoryEventUpdateEventType");
    nodes["AuditHistoryValueUpdateEventType"] = std::make_unique<ua_object_type>(ua_node_id(0, 3006), qualified_name("AuditHistoryValueUpdateEventType"), "AuditHistoryValueUpdateEventType");
    nodes["AuditHistoryDeleteEventType"] = std::make_unique<ua_object_type>(ua_node_id(0, 3012), qualified_name("AuditHistoryDeleteEventType"), "AuditHistoryDeleteEventType");
    nodes["AuditHistoryRawModifyDeleteEventType"] = std::make_unique<ua_object_type>(ua_node_id(0, 3014), qualified_name("AuditHistoryRawModifyDeleteEventType"), "AuditHistoryRawModifyDeleteEventType");
    nodes["AuditHistoryAtTimeDeleteEventType"] = std::make_unique<ua_object_type>(ua_node_id(0, 3019), qualified_name("AuditHistoryAtTimeDeleteEventType"), "AuditHistoryAtTimeDeleteEventType");
    nodes["AuditHistoryEventDeleteEventType"] = std::make_unique<ua_object_type>(ua_node_id(0, 3022), qualified_name("AuditHistoryEventDeleteEventType"), "AuditHistoryEventDeleteEventType");
    nodes["TrustListType"] = std::make_unique<ua_object_type>(ua_node_id(0, 12522), qualified_name("TrustListType"), "TrustListType");
    nodes["CertificateGroupType"] = std::make_unique<ua_object_type>(ua_node_id(0, 12555), qualified_name("CertificateGroupType"), "CertificateGroupType");
    nodes["CertificateGroupFolderType"] = std::make_unique<ua_object_type>(ua_node_id(0, 13813), qualified_name("CertificateGroupFolderType"), "CertificateGroupFolderType");
    nodes["CertificateType"] = std::make_unique<ua_object_type>(ua_node_id(0, 12556), qualified_name("CertificateType"), "CertificateType");
    nodes["ApplicationCertificateType"] = std::make_unique<ua_object_type>(ua_node_id(0, 12557), qualified_name("ApplicationCertificateType"), "ApplicationCertificateType");
    nodes["HttpsCertificateType"] = std::make_unique<ua_object_type>(ua_node_id(0, 12558), qualified_name("HttpsCertificateType"), "HttpsCertificateType");
    nodes["RsaMinApplicationCertificateType"] = std::make_unique<ua_object_type>(ua_node_id(0, 12559), qualified_name("RsaMinApplicationCertificateType"), "RsaMinApplicationCertificateType");
    nodes["RsaSha256ApplicationCertificateType"] = std::make_unique<ua_object_type>(ua_node_id(0, 12560), qualified_name("RsaSha256ApplicationCertificateType"), "RsaSha256ApplicationCertificateType");
    nodes["TrustListUpdatedAuditEventType"] = std::make_unique<ua_object_type>(ua_node_id(0, 12561), qualified_name("TrustListUpdatedAuditEventType"), "TrustListUpdatedAuditEventType");
    nodes["ServerConfigurationType"] = std::make_unique<ua_object_type>(ua_node_id(0, 12581), qualified_name("ServerConfigurationType"), "ServerConfigurationType");
    nodes["CertificateUpdatedAuditEventType"] = std::make_unique<ua_object_type>(ua_node_id(0, 12620), qualified_name("CertificateUpdatedAuditEventType"), "CertificateUpdatedAuditEventType");
    nodes["AggregateConfigurationType"] = std::make_unique<ua_object_type>(ua_node_id(0, 11187), qualified_name("AggregateConfigurationType"), "AggregateConfigurationType");
}
