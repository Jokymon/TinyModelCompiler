#include "opc_ua_nodeset2.h"
#include "ua_model.h"

void populate_node_list(std::map<std::string, ua_node_ptr> &nodes)
{
    nodes["DefaultBinary"] = std::make_shared<ua_object>();
    nodes["DefaultBinary"]->node_id = ua_node_id(0, 3062);
    nodes["DefaultBinary"]->browse_name = qualified_name("Default Binary");
    nodes["DefaultBinary"]->symbolic_name = "DefaultBinary";
    nodes["DefaultXml"] = std::make_shared<ua_object>();
    nodes["DefaultXml"]->node_id = ua_node_id(0, 3063);
    nodes["DefaultXml"]->browse_name = qualified_name("Default XML");
    nodes["DefaultXml"]->symbolic_name = "DefaultXml";
    nodes["BaseObjectType"] = std::make_shared<ua_object_type>();
    nodes["BaseObjectType"]->node_id = ua_node_id(0, 58);
    nodes["BaseObjectType"]->browse_name = qualified_name("BaseObjectType");
    nodes["BaseObjectType"]->symbolic_name = "";
    nodes["FolderType"] = std::make_shared<ua_object_type>();
    nodes["FolderType"]->node_id = ua_node_id(0, 61);
    nodes["FolderType"]->browse_name = qualified_name("FolderType");
    nodes["FolderType"]->symbolic_name = "";
    nodes["BaseVariableType"] = std::make_shared<ua_variable_type>();
    nodes["BaseVariableType"]->node_id = ua_node_id(0, 62);
    nodes["BaseVariableType"]->browse_name = qualified_name("BaseVariableType");
    nodes["BaseVariableType"]->symbolic_name = "";
    nodes["BaseDataVariableType"] = std::make_shared<ua_variable_type>();
    nodes["BaseDataVariableType"]->node_id = ua_node_id(0, 63);
    nodes["BaseDataVariableType"]->browse_name = qualified_name("BaseDataVariableType");
    nodes["BaseDataVariableType"]->symbolic_name = "";
    nodes["PropertyType"] = std::make_shared<ua_variable_type>();
    nodes["PropertyType"]->node_id = ua_node_id(0, 68);
    nodes["PropertyType"]->browse_name = qualified_name("PropertyType");
    nodes["PropertyType"]->symbolic_name = "";
    nodes["DataTypeDescriptionType"] = std::make_shared<ua_variable_type>();
    nodes["DataTypeDescriptionType"]->node_id = ua_node_id(0, 69);
    nodes["DataTypeDescriptionType"]->browse_name = qualified_name("DataTypeDescriptionType");
    nodes["DataTypeDescriptionType"]->symbolic_name = "";
    nodes["DataTypeDictionaryType"] = std::make_shared<ua_variable_type>();
    nodes["DataTypeDictionaryType"]->node_id = ua_node_id(0, 72);
    nodes["DataTypeDictionaryType"]->browse_name = qualified_name("DataTypeDictionaryType");
    nodes["DataTypeDictionaryType"]->symbolic_name = "";
    nodes["DataTypeSystemType"] = std::make_shared<ua_object_type>();
    nodes["DataTypeSystemType"]->node_id = ua_node_id(0, 75);
    nodes["DataTypeSystemType"]->browse_name = qualified_name("DataTypeSystemType");
    nodes["DataTypeSystemType"]->symbolic_name = "";
    nodes["DataTypeEncodingType"] = std::make_shared<ua_object_type>();
    nodes["DataTypeEncodingType"]->node_id = ua_node_id(0, 76);
    nodes["DataTypeEncodingType"]->browse_name = qualified_name("DataTypeEncodingType");
    nodes["DataTypeEncodingType"]->symbolic_name = "";
    nodes["ModellingRuleType"] = std::make_shared<ua_object_type>();
    nodes["ModellingRuleType"]->node_id = ua_node_id(0, 77);
    nodes["ModellingRuleType"]->browse_name = qualified_name("ModellingRuleType");
    nodes["ModellingRuleType"]->symbolic_name = "";
    nodes["ModellingRule_Mandatory"] = std::make_shared<ua_object>();
    nodes["ModellingRule_Mandatory"]->node_id = ua_node_id(0, 78);
    nodes["ModellingRule_Mandatory"]->browse_name = qualified_name("Mandatory");
    nodes["ModellingRule_Mandatory"]->symbolic_name = "ModellingRule_Mandatory";
    nodes["ModellingRule_Optional"] = std::make_shared<ua_object>();
    nodes["ModellingRule_Optional"]->node_id = ua_node_id(0, 80);
    nodes["ModellingRule_Optional"]->browse_name = qualified_name("Optional");
    nodes["ModellingRule_Optional"]->symbolic_name = "ModellingRule_Optional";
    nodes["ModellingRule_ExposesItsArray"] = std::make_shared<ua_object>();
    nodes["ModellingRule_ExposesItsArray"]->node_id = ua_node_id(0, 83);
    nodes["ModellingRule_ExposesItsArray"]->browse_name = qualified_name("ExposesItsArray");
    nodes["ModellingRule_ExposesItsArray"]->symbolic_name = "ModellingRule_ExposesItsArray";
    nodes["ModellingRule_MandatoryShared"] = std::make_shared<ua_object>();
    nodes["ModellingRule_MandatoryShared"]->node_id = ua_node_id(0, 79);
    nodes["ModellingRule_MandatoryShared"]->browse_name = qualified_name("MandatoryShared");
    nodes["ModellingRule_MandatoryShared"]->symbolic_name = "ModellingRule_MandatoryShared";
    nodes["ModellingRule_OptionalPlaceholder"] = std::make_shared<ua_object>();
    nodes["ModellingRule_OptionalPlaceholder"]->node_id = ua_node_id(0, 11508);
    nodes["ModellingRule_OptionalPlaceholder"]->browse_name = qualified_name("OptionalPlaceholder");
    nodes["ModellingRule_OptionalPlaceholder"]->symbolic_name = "ModellingRule_OptionalPlaceholder";
    nodes["ModellingRule_MandatoryPlaceholder"] = std::make_shared<ua_object>();
    nodes["ModellingRule_MandatoryPlaceholder"]->node_id = ua_node_id(0, 11510);
    nodes["ModellingRule_MandatoryPlaceholder"]->browse_name = qualified_name("MandatoryPlaceholder");
    nodes["ModellingRule_MandatoryPlaceholder"]->symbolic_name = "ModellingRule_MandatoryPlaceholder";
    nodes["RootFolder"] = std::make_shared<ua_object>();
    nodes["RootFolder"]->node_id = ua_node_id(0, 84);
    nodes["RootFolder"]->browse_name = qualified_name("Root");
    nodes["RootFolder"]->symbolic_name = "RootFolder";
    nodes["ObjectsFolder"] = std::make_shared<ua_object>();
    nodes["ObjectsFolder"]->node_id = ua_node_id(0, 85);
    nodes["ObjectsFolder"]->browse_name = qualified_name("Objects");
    nodes["ObjectsFolder"]->symbolic_name = "ObjectsFolder";
    nodes["TypesFolder"] = std::make_shared<ua_object>();
    nodes["TypesFolder"]->node_id = ua_node_id(0, 86);
    nodes["TypesFolder"]->browse_name = qualified_name("Types");
    nodes["TypesFolder"]->symbolic_name = "TypesFolder";
    nodes["ViewsFolder"] = std::make_shared<ua_object>();
    nodes["ViewsFolder"]->node_id = ua_node_id(0, 87);
    nodes["ViewsFolder"]->browse_name = qualified_name("Views");
    nodes["ViewsFolder"]->symbolic_name = "ViewsFolder";
    nodes["ObjectTypesFolder"] = std::make_shared<ua_object>();
    nodes["ObjectTypesFolder"]->node_id = ua_node_id(0, 88);
    nodes["ObjectTypesFolder"]->browse_name = qualified_name("ObjectTypes");
    nodes["ObjectTypesFolder"]->symbolic_name = "ObjectTypesFolder";
    nodes["VariableTypesFolder"] = std::make_shared<ua_object>();
    nodes["VariableTypesFolder"]->node_id = ua_node_id(0, 89);
    nodes["VariableTypesFolder"]->browse_name = qualified_name("VariableTypes");
    nodes["VariableTypesFolder"]->symbolic_name = "VariableTypesFolder";
    nodes["DataTypesFolder"] = std::make_shared<ua_object>();
    nodes["DataTypesFolder"]->node_id = ua_node_id(0, 90);
    nodes["DataTypesFolder"]->browse_name = qualified_name("DataTypes");
    nodes["DataTypesFolder"]->symbolic_name = "DataTypesFolder";
    nodes["ReferenceTypesFolder"] = std::make_shared<ua_object>();
    nodes["ReferenceTypesFolder"]->node_id = ua_node_id(0, 91);
    nodes["ReferenceTypesFolder"]->browse_name = qualified_name("ReferenceTypes");
    nodes["ReferenceTypesFolder"]->symbolic_name = "ReferenceTypesFolder";
    nodes["XmlSchema_TypeSystem"] = std::make_shared<ua_object>();
    nodes["XmlSchema_TypeSystem"]->node_id = ua_node_id(0, 92);
    nodes["XmlSchema_TypeSystem"]->browse_name = qualified_name("XML Schema");
    nodes["XmlSchema_TypeSystem"]->symbolic_name = "XmlSchema_TypeSystem";
    nodes["OPCBinarySchema_TypeSystem"] = std::make_shared<ua_object>();
    nodes["OPCBinarySchema_TypeSystem"]->node_id = ua_node_id(0, 93);
    nodes["OPCBinarySchema_TypeSystem"]->browse_name = qualified_name("OPC Binary");
    nodes["OPCBinarySchema_TypeSystem"]->symbolic_name = "OPCBinarySchema_TypeSystem";
    nodes["ServerType"] = std::make_shared<ua_object_type>();
    nodes["ServerType"]->node_id = ua_node_id(0, 2004);
    nodes["ServerType"]->browse_name = qualified_name("ServerType");
    nodes["ServerType"]->symbolic_name = "";
    nodes["ServerCapabilities"] = std::make_shared<ua_object>();
    nodes["ServerCapabilities"]->node_id = ua_node_id(0, 2009);
    nodes["ServerCapabilities"]->browse_name = qualified_name("ServerCapabilities");
    nodes["ServerCapabilities"]->symbolic_name = "";
    nodes["ModellingRules"] = std::make_shared<ua_object>();
    nodes["ModellingRules"]->node_id = ua_node_id(0, 3093);
    nodes["ModellingRules"]->browse_name = qualified_name("ModellingRules");
    nodes["ModellingRules"]->symbolic_name = "";
    nodes["AggregateFunctions"] = std::make_shared<ua_object>();
    nodes["AggregateFunctions"]->node_id = ua_node_id(0, 3094);
    nodes["AggregateFunctions"]->browse_name = qualified_name("AggregateFunctions");
    nodes["AggregateFunctions"]->symbolic_name = "";
    nodes["ServerDiagnostics"] = std::make_shared<ua_object>();
    nodes["ServerDiagnostics"]->node_id = ua_node_id(0, 2010);
    nodes["ServerDiagnostics"]->browse_name = qualified_name("ServerDiagnostics");
    nodes["ServerDiagnostics"]->symbolic_name = "";
    nodes["SessionsDiagnosticsSummary"] = std::make_shared<ua_object>();
    nodes["SessionsDiagnosticsSummary"]->node_id = ua_node_id(0, 3111);
    nodes["SessionsDiagnosticsSummary"]->browse_name = qualified_name("SessionsDiagnosticsSummary");
    nodes["SessionsDiagnosticsSummary"]->symbolic_name = "";
    nodes["VendorServerInfo"] = std::make_shared<ua_object>();
    nodes["VendorServerInfo"]->node_id = ua_node_id(0, 2011);
    nodes["VendorServerInfo"]->browse_name = qualified_name("VendorServerInfo");
    nodes["VendorServerInfo"]->symbolic_name = "";
    nodes["ServerRedundancy"] = std::make_shared<ua_object>();
    nodes["ServerRedundancy"]->node_id = ua_node_id(0, 2012);
    nodes["ServerRedundancy"]->browse_name = qualified_name("ServerRedundancy");
    nodes["ServerRedundancy"]->symbolic_name = "";
    nodes["Namespaces"] = std::make_shared<ua_object>();
    nodes["Namespaces"]->node_id = ua_node_id(0, 11527);
    nodes["Namespaces"]->browse_name = qualified_name("Namespaces");
    nodes["Namespaces"]->symbolic_name = "";
    nodes["ServerCapabilitiesType"] = std::make_shared<ua_object_type>();
    nodes["ServerCapabilitiesType"]->node_id = ua_node_id(0, 2013);
    nodes["ServerCapabilitiesType"]->browse_name = qualified_name("ServerCapabilitiesType");
    nodes["ServerCapabilitiesType"]->symbolic_name = "";
    nodes["OperationLimits"] = std::make_shared<ua_object>();
    nodes["OperationLimits"]->node_id = ua_node_id(0, 11551);
    nodes["OperationLimits"]->browse_name = qualified_name("OperationLimits");
    nodes["OperationLimits"]->symbolic_name = "";
    nodes["ModellingRules"] = std::make_shared<ua_object>();
    nodes["ModellingRules"]->node_id = ua_node_id(0, 2019);
    nodes["ModellingRules"]->browse_name = qualified_name("ModellingRules");
    nodes["ModellingRules"]->symbolic_name = "";
    nodes["AggregateFunctions"] = std::make_shared<ua_object>();
    nodes["AggregateFunctions"]->node_id = ua_node_id(0, 2754);
    nodes["AggregateFunctions"]->browse_name = qualified_name("AggregateFunctions");
    nodes["AggregateFunctions"]->symbolic_name = "";
    nodes["ServerDiagnosticsType"] = std::make_shared<ua_object_type>();
    nodes["ServerDiagnosticsType"]->node_id = ua_node_id(0, 2020);
    nodes["ServerDiagnosticsType"]->browse_name = qualified_name("ServerDiagnosticsType");
    nodes["ServerDiagnosticsType"]->symbolic_name = "";
    nodes["SessionsDiagnosticsSummary"] = std::make_shared<ua_object>();
    nodes["SessionsDiagnosticsSummary"]->node_id = ua_node_id(0, 2744);
    nodes["SessionsDiagnosticsSummary"]->browse_name = qualified_name("SessionsDiagnosticsSummary");
    nodes["SessionsDiagnosticsSummary"]->symbolic_name = "";
    nodes["SessionsDiagnosticsSummaryType"] = std::make_shared<ua_object_type>();
    nodes["SessionsDiagnosticsSummaryType"]->node_id = ua_node_id(0, 2026);
    nodes["SessionsDiagnosticsSummaryType"]->browse_name = qualified_name("SessionsDiagnosticsSummaryType");
    nodes["SessionsDiagnosticsSummaryType"]->symbolic_name = "";
    nodes["ClientName_Placeholder"] = std::make_shared<ua_object>();
    nodes["ClientName_Placeholder"]->node_id = ua_node_id(0, 12097);
    nodes["ClientName_Placeholder"]->browse_name = qualified_name("<ClientName>");
    nodes["ClientName_Placeholder"]->symbolic_name = "ClientName_Placeholder";
    nodes["SessionDiagnosticsObjectType"] = std::make_shared<ua_object_type>();
    nodes["SessionDiagnosticsObjectType"]->node_id = ua_node_id(0, 2029);
    nodes["SessionDiagnosticsObjectType"]->browse_name = qualified_name("SessionDiagnosticsObjectType");
    nodes["SessionDiagnosticsObjectType"]->symbolic_name = "";
    nodes["VendorServerInfoType"] = std::make_shared<ua_object_type>();
    nodes["VendorServerInfoType"]->node_id = ua_node_id(0, 2033);
    nodes["VendorServerInfoType"]->browse_name = qualified_name("VendorServerInfoType");
    nodes["VendorServerInfoType"]->symbolic_name = "";
    nodes["ServerRedundancyType"] = std::make_shared<ua_object_type>();
    nodes["ServerRedundancyType"]->node_id = ua_node_id(0, 2034);
    nodes["ServerRedundancyType"]->browse_name = qualified_name("ServerRedundancyType");
    nodes["ServerRedundancyType"]->symbolic_name = "";
    nodes["TransparentRedundancyType"] = std::make_shared<ua_object_type>();
    nodes["TransparentRedundancyType"]->node_id = ua_node_id(0, 2036);
    nodes["TransparentRedundancyType"]->browse_name = qualified_name("TransparentRedundancyType");
    nodes["TransparentRedundancyType"]->symbolic_name = "";
    nodes["NonTransparentRedundancyType"] = std::make_shared<ua_object_type>();
    nodes["NonTransparentRedundancyType"]->node_id = ua_node_id(0, 2039);
    nodes["NonTransparentRedundancyType"]->browse_name = qualified_name("NonTransparentRedundancyType");
    nodes["NonTransparentRedundancyType"]->symbolic_name = "";
    nodes["NonTransparentNetworkRedundancyType"] = std::make_shared<ua_object_type>();
    nodes["NonTransparentNetworkRedundancyType"]->node_id = ua_node_id(0, 11945);
    nodes["NonTransparentNetworkRedundancyType"]->browse_name = qualified_name("NonTransparentNetworkRedundancyType");
    nodes["NonTransparentNetworkRedundancyType"]->symbolic_name = "";
    nodes["OperationLimitsType"] = std::make_shared<ua_object_type>();
    nodes["OperationLimitsType"]->node_id = ua_node_id(0, 11564);
    nodes["OperationLimitsType"]->browse_name = qualified_name("OperationLimitsType");
    nodes["OperationLimitsType"]->symbolic_name = "";
    nodes["FileType"] = std::make_shared<ua_object_type>();
    nodes["FileType"]->node_id = ua_node_id(0, 11575);
    nodes["FileType"]->browse_name = qualified_name("FileType");
    nodes["FileType"]->symbolic_name = "";
    nodes["FileDirectoryType"] = std::make_shared<ua_object_type>();
    nodes["FileDirectoryType"]->node_id = ua_node_id(0, 13353);
    nodes["FileDirectoryType"]->browse_name = qualified_name("FileDirectoryType");
    nodes["FileDirectoryType"]->symbolic_name = "";
    nodes["FileDirectoryName_Placeholder"] = std::make_shared<ua_object>();
    nodes["FileDirectoryName_Placeholder"]->node_id = ua_node_id(0, 13354);
    nodes["FileDirectoryName_Placeholder"]->browse_name = qualified_name("<FileDirectoryName>");
    nodes["FileDirectoryName_Placeholder"]->symbolic_name = "FileDirectoryName_Placeholder";
    nodes["FileName_Placeholder"] = std::make_shared<ua_object>();
    nodes["FileName_Placeholder"]->node_id = ua_node_id(0, 13366);
    nodes["FileName_Placeholder"]->browse_name = qualified_name("<FileName>");
    nodes["FileName_Placeholder"]->symbolic_name = "FileName_Placeholder";
    nodes["AddressSpaceFileType"] = std::make_shared<ua_object_type>();
    nodes["AddressSpaceFileType"]->node_id = ua_node_id(0, 11595);
    nodes["AddressSpaceFileType"]->browse_name = qualified_name("AddressSpaceFileType");
    nodes["AddressSpaceFileType"]->symbolic_name = "";
    nodes["NamespaceMetadataType"] = std::make_shared<ua_object_type>();
    nodes["NamespaceMetadataType"]->node_id = ua_node_id(0, 11616);
    nodes["NamespaceMetadataType"]->browse_name = qualified_name("NamespaceMetadataType");
    nodes["NamespaceMetadataType"]->symbolic_name = "";
    nodes["NamespaceFile"] = std::make_shared<ua_object>();
    nodes["NamespaceFile"]->node_id = ua_node_id(0, 11624);
    nodes["NamespaceFile"]->browse_name = qualified_name("NamespaceFile");
    nodes["NamespaceFile"]->symbolic_name = "";
    nodes["NamespacesType"] = std::make_shared<ua_object_type>();
    nodes["NamespacesType"]->node_id = ua_node_id(0, 11645);
    nodes["NamespacesType"]->browse_name = qualified_name("NamespacesType");
    nodes["NamespacesType"]->symbolic_name = "";
    nodes["NamespaceIdentifier_Placeholder"] = std::make_shared<ua_object>();
    nodes["NamespaceIdentifier_Placeholder"]->node_id = ua_node_id(0, 11646);
    nodes["NamespaceIdentifier_Placeholder"]->browse_name = qualified_name("<NamespaceIdentifier>");
    nodes["NamespaceIdentifier_Placeholder"]->symbolic_name = "NamespaceIdentifier_Placeholder";
    nodes["AddressSpaceFile"] = std::make_shared<ua_object>();
    nodes["AddressSpaceFile"]->node_id = ua_node_id(0, 11675);
    nodes["AddressSpaceFile"]->browse_name = qualified_name("AddressSpaceFile");
    nodes["AddressSpaceFile"]->symbolic_name = "";
    nodes["BaseEventType"] = std::make_shared<ua_object_type>();
    nodes["BaseEventType"]->node_id = ua_node_id(0, 2041);
    nodes["BaseEventType"]->browse_name = qualified_name("BaseEventType");
    nodes["BaseEventType"]->symbolic_name = "";
    nodes["AuditEventType"] = std::make_shared<ua_object_type>();
    nodes["AuditEventType"]->node_id = ua_node_id(0, 2052);
    nodes["AuditEventType"]->browse_name = qualified_name("AuditEventType");
    nodes["AuditEventType"]->symbolic_name = "";
    nodes["AuditSecurityEventType"] = std::make_shared<ua_object_type>();
    nodes["AuditSecurityEventType"]->node_id = ua_node_id(0, 2058);
    nodes["AuditSecurityEventType"]->browse_name = qualified_name("AuditSecurityEventType");
    nodes["AuditSecurityEventType"]->symbolic_name = "";
    nodes["AuditChannelEventType"] = std::make_shared<ua_object_type>();
    nodes["AuditChannelEventType"]->node_id = ua_node_id(0, 2059);
    nodes["AuditChannelEventType"]->browse_name = qualified_name("AuditChannelEventType");
    nodes["AuditChannelEventType"]->symbolic_name = "";
    nodes["AuditOpenSecureChannelEventType"] = std::make_shared<ua_object_type>();
    nodes["AuditOpenSecureChannelEventType"]->node_id = ua_node_id(0, 2060);
    nodes["AuditOpenSecureChannelEventType"]->browse_name = qualified_name("AuditOpenSecureChannelEventType");
    nodes["AuditOpenSecureChannelEventType"]->symbolic_name = "";
    nodes["AuditSessionEventType"] = std::make_shared<ua_object_type>();
    nodes["AuditSessionEventType"]->node_id = ua_node_id(0, 2069);
    nodes["AuditSessionEventType"]->browse_name = qualified_name("AuditSessionEventType");
    nodes["AuditSessionEventType"]->symbolic_name = "";
    nodes["AuditCreateSessionEventType"] = std::make_shared<ua_object_type>();
    nodes["AuditCreateSessionEventType"]->node_id = ua_node_id(0, 2071);
    nodes["AuditCreateSessionEventType"]->browse_name = qualified_name("AuditCreateSessionEventType");
    nodes["AuditCreateSessionEventType"]->symbolic_name = "";
    nodes["AuditUrlMismatchEventType"] = std::make_shared<ua_object_type>();
    nodes["AuditUrlMismatchEventType"]->node_id = ua_node_id(0, 2748);
    nodes["AuditUrlMismatchEventType"]->browse_name = qualified_name("AuditUrlMismatchEventType");
    nodes["AuditUrlMismatchEventType"]->symbolic_name = "";
    nodes["AuditActivateSessionEventType"] = std::make_shared<ua_object_type>();
    nodes["AuditActivateSessionEventType"]->node_id = ua_node_id(0, 2075);
    nodes["AuditActivateSessionEventType"]->browse_name = qualified_name("AuditActivateSessionEventType");
    nodes["AuditActivateSessionEventType"]->symbolic_name = "";
    nodes["AuditCancelEventType"] = std::make_shared<ua_object_type>();
    nodes["AuditCancelEventType"]->node_id = ua_node_id(0, 2078);
    nodes["AuditCancelEventType"]->browse_name = qualified_name("AuditCancelEventType");
    nodes["AuditCancelEventType"]->symbolic_name = "";
    nodes["AuditCertificateEventType"] = std::make_shared<ua_object_type>();
    nodes["AuditCertificateEventType"]->node_id = ua_node_id(0, 2080);
    nodes["AuditCertificateEventType"]->browse_name = qualified_name("AuditCertificateEventType");
    nodes["AuditCertificateEventType"]->symbolic_name = "";
    nodes["AuditCertificateDataMismatchEventType"] = std::make_shared<ua_object_type>();
    nodes["AuditCertificateDataMismatchEventType"]->node_id = ua_node_id(0, 2082);
    nodes["AuditCertificateDataMismatchEventType"]->browse_name = qualified_name("AuditCertificateDataMismatchEventType");
    nodes["AuditCertificateDataMismatchEventType"]->symbolic_name = "";
    nodes["AuditCertificateExpiredEventType"] = std::make_shared<ua_object_type>();
    nodes["AuditCertificateExpiredEventType"]->node_id = ua_node_id(0, 2085);
    nodes["AuditCertificateExpiredEventType"]->browse_name = qualified_name("AuditCertificateExpiredEventType");
    nodes["AuditCertificateExpiredEventType"]->symbolic_name = "";
    nodes["AuditCertificateInvalidEventType"] = std::make_shared<ua_object_type>();
    nodes["AuditCertificateInvalidEventType"]->node_id = ua_node_id(0, 2086);
    nodes["AuditCertificateInvalidEventType"]->browse_name = qualified_name("AuditCertificateInvalidEventType");
    nodes["AuditCertificateInvalidEventType"]->symbolic_name = "";
    nodes["AuditCertificateUntrustedEventType"] = std::make_shared<ua_object_type>();
    nodes["AuditCertificateUntrustedEventType"]->node_id = ua_node_id(0, 2087);
    nodes["AuditCertificateUntrustedEventType"]->browse_name = qualified_name("AuditCertificateUntrustedEventType");
    nodes["AuditCertificateUntrustedEventType"]->symbolic_name = "";
    nodes["AuditCertificateRevokedEventType"] = std::make_shared<ua_object_type>();
    nodes["AuditCertificateRevokedEventType"]->node_id = ua_node_id(0, 2088);
    nodes["AuditCertificateRevokedEventType"]->browse_name = qualified_name("AuditCertificateRevokedEventType");
    nodes["AuditCertificateRevokedEventType"]->symbolic_name = "";
    nodes["AuditCertificateMismatchEventType"] = std::make_shared<ua_object_type>();
    nodes["AuditCertificateMismatchEventType"]->node_id = ua_node_id(0, 2089);
    nodes["AuditCertificateMismatchEventType"]->browse_name = qualified_name("AuditCertificateMismatchEventType");
    nodes["AuditCertificateMismatchEventType"]->symbolic_name = "";
    nodes["AuditNodeManagementEventType"] = std::make_shared<ua_object_type>();
    nodes["AuditNodeManagementEventType"]->node_id = ua_node_id(0, 2090);
    nodes["AuditNodeManagementEventType"]->browse_name = qualified_name("AuditNodeManagementEventType");
    nodes["AuditNodeManagementEventType"]->symbolic_name = "";
    nodes["AuditAddNodesEventType"] = std::make_shared<ua_object_type>();
    nodes["AuditAddNodesEventType"]->node_id = ua_node_id(0, 2091);
    nodes["AuditAddNodesEventType"]->browse_name = qualified_name("AuditAddNodesEventType");
    nodes["AuditAddNodesEventType"]->symbolic_name = "";
    nodes["AuditDeleteNodesEventType"] = std::make_shared<ua_object_type>();
    nodes["AuditDeleteNodesEventType"]->node_id = ua_node_id(0, 2093);
    nodes["AuditDeleteNodesEventType"]->browse_name = qualified_name("AuditDeleteNodesEventType");
    nodes["AuditDeleteNodesEventType"]->symbolic_name = "";
    nodes["AuditAddReferencesEventType"] = std::make_shared<ua_object_type>();
    nodes["AuditAddReferencesEventType"]->node_id = ua_node_id(0, 2095);
    nodes["AuditAddReferencesEventType"]->browse_name = qualified_name("AuditAddReferencesEventType");
    nodes["AuditAddReferencesEventType"]->symbolic_name = "";
    nodes["AuditDeleteReferencesEventType"] = std::make_shared<ua_object_type>();
    nodes["AuditDeleteReferencesEventType"]->node_id = ua_node_id(0, 2097);
    nodes["AuditDeleteReferencesEventType"]->browse_name = qualified_name("AuditDeleteReferencesEventType");
    nodes["AuditDeleteReferencesEventType"]->symbolic_name = "";
    nodes["AuditUpdateEventType"] = std::make_shared<ua_object_type>();
    nodes["AuditUpdateEventType"]->node_id = ua_node_id(0, 2099);
    nodes["AuditUpdateEventType"]->browse_name = qualified_name("AuditUpdateEventType");
    nodes["AuditUpdateEventType"]->symbolic_name = "";
    nodes["AuditWriteUpdateEventType"] = std::make_shared<ua_object_type>();
    nodes["AuditWriteUpdateEventType"]->node_id = ua_node_id(0, 2100);
    nodes["AuditWriteUpdateEventType"]->browse_name = qualified_name("AuditWriteUpdateEventType");
    nodes["AuditWriteUpdateEventType"]->symbolic_name = "";
    nodes["AuditHistoryUpdateEventType"] = std::make_shared<ua_object_type>();
    nodes["AuditHistoryUpdateEventType"]->node_id = ua_node_id(0, 2104);
    nodes["AuditHistoryUpdateEventType"]->browse_name = qualified_name("AuditHistoryUpdateEventType");
    nodes["AuditHistoryUpdateEventType"]->symbolic_name = "";
    nodes["AuditUpdateMethodEventType"] = std::make_shared<ua_object_type>();
    nodes["AuditUpdateMethodEventType"]->node_id = ua_node_id(0, 2127);
    nodes["AuditUpdateMethodEventType"]->browse_name = qualified_name("AuditUpdateMethodEventType");
    nodes["AuditUpdateMethodEventType"]->symbolic_name = "";
    nodes["SystemEventType"] = std::make_shared<ua_object_type>();
    nodes["SystemEventType"]->node_id = ua_node_id(0, 2130);
    nodes["SystemEventType"]->browse_name = qualified_name("SystemEventType");
    nodes["SystemEventType"]->symbolic_name = "";
    nodes["DeviceFailureEventType"] = std::make_shared<ua_object_type>();
    nodes["DeviceFailureEventType"]->node_id = ua_node_id(0, 2131);
    nodes["DeviceFailureEventType"]->browse_name = qualified_name("DeviceFailureEventType");
    nodes["DeviceFailureEventType"]->symbolic_name = "";
    nodes["SystemStatusChangeEventType"] = std::make_shared<ua_object_type>();
    nodes["SystemStatusChangeEventType"]->node_id = ua_node_id(0, 11446);
    nodes["SystemStatusChangeEventType"]->browse_name = qualified_name("SystemStatusChangeEventType");
    nodes["SystemStatusChangeEventType"]->symbolic_name = "";
    nodes["BaseModelChangeEventType"] = std::make_shared<ua_object_type>();
    nodes["BaseModelChangeEventType"]->node_id = ua_node_id(0, 2132);
    nodes["BaseModelChangeEventType"]->browse_name = qualified_name("BaseModelChangeEventType");
    nodes["BaseModelChangeEventType"]->symbolic_name = "";
    nodes["GeneralModelChangeEventType"] = std::make_shared<ua_object_type>();
    nodes["GeneralModelChangeEventType"]->node_id = ua_node_id(0, 2133);
    nodes["GeneralModelChangeEventType"]->browse_name = qualified_name("GeneralModelChangeEventType");
    nodes["GeneralModelChangeEventType"]->symbolic_name = "";
    nodes["SemanticChangeEventType"] = std::make_shared<ua_object_type>();
    nodes["SemanticChangeEventType"]->node_id = ua_node_id(0, 2738);
    nodes["SemanticChangeEventType"]->browse_name = qualified_name("SemanticChangeEventType");
    nodes["SemanticChangeEventType"]->symbolic_name = "";
    nodes["EventQueueOverflowEventType"] = std::make_shared<ua_object_type>();
    nodes["EventQueueOverflowEventType"]->node_id = ua_node_id(0, 3035);
    nodes["EventQueueOverflowEventType"]->browse_name = qualified_name("EventQueueOverflowEventType");
    nodes["EventQueueOverflowEventType"]->symbolic_name = "";
    nodes["ProgressEventType"] = std::make_shared<ua_object_type>();
    nodes["ProgressEventType"]->node_id = ua_node_id(0, 11436);
    nodes["ProgressEventType"]->browse_name = qualified_name("ProgressEventType");
    nodes["ProgressEventType"]->symbolic_name = "";
    nodes["AggregateFunctionType"] = std::make_shared<ua_object_type>();
    nodes["AggregateFunctionType"]->node_id = ua_node_id(0, 2340);
    nodes["AggregateFunctionType"]->browse_name = qualified_name("AggregateFunctionType");
    nodes["AggregateFunctionType"]->symbolic_name = "";
    nodes["ServerVendorCapabilityType"] = std::make_shared<ua_variable_type>();
    nodes["ServerVendorCapabilityType"]->node_id = ua_node_id(0, 2137);
    nodes["ServerVendorCapabilityType"]->browse_name = qualified_name("ServerVendorCapabilityType");
    nodes["ServerVendorCapabilityType"]->symbolic_name = "";
    nodes["ServerStatusType"] = std::make_shared<ua_variable_type>();
    nodes["ServerStatusType"]->node_id = ua_node_id(0, 2138);
    nodes["ServerStatusType"]->browse_name = qualified_name("ServerStatusType");
    nodes["ServerStatusType"]->symbolic_name = "";
    nodes["BuildInfoType"] = std::make_shared<ua_variable_type>();
    nodes["BuildInfoType"]->node_id = ua_node_id(0, 3051);
    nodes["BuildInfoType"]->browse_name = qualified_name("BuildInfoType");
    nodes["BuildInfoType"]->symbolic_name = "";
    nodes["ServerDiagnosticsSummaryType"] = std::make_shared<ua_variable_type>();
    nodes["ServerDiagnosticsSummaryType"]->node_id = ua_node_id(0, 2150);
    nodes["ServerDiagnosticsSummaryType"]->browse_name = qualified_name("ServerDiagnosticsSummaryType");
    nodes["ServerDiagnosticsSummaryType"]->symbolic_name = "";
    nodes["SamplingIntervalDiagnosticsArrayType"] = std::make_shared<ua_variable_type>();
    nodes["SamplingIntervalDiagnosticsArrayType"]->node_id = ua_node_id(0, 2164);
    nodes["SamplingIntervalDiagnosticsArrayType"]->browse_name = qualified_name("SamplingIntervalDiagnosticsArrayType");
    nodes["SamplingIntervalDiagnosticsArrayType"]->symbolic_name = "";
    nodes["SamplingIntervalDiagnosticsType"] = std::make_shared<ua_variable_type>();
    nodes["SamplingIntervalDiagnosticsType"]->node_id = ua_node_id(0, 2165);
    nodes["SamplingIntervalDiagnosticsType"]->browse_name = qualified_name("SamplingIntervalDiagnosticsType");
    nodes["SamplingIntervalDiagnosticsType"]->symbolic_name = "";
    nodes["SubscriptionDiagnosticsArrayType"] = std::make_shared<ua_variable_type>();
    nodes["SubscriptionDiagnosticsArrayType"]->node_id = ua_node_id(0, 2171);
    nodes["SubscriptionDiagnosticsArrayType"]->browse_name = qualified_name("SubscriptionDiagnosticsArrayType");
    nodes["SubscriptionDiagnosticsArrayType"]->symbolic_name = "";
    nodes["SubscriptionDiagnosticsType"] = std::make_shared<ua_variable_type>();
    nodes["SubscriptionDiagnosticsType"]->node_id = ua_node_id(0, 2172);
    nodes["SubscriptionDiagnosticsType"]->browse_name = qualified_name("SubscriptionDiagnosticsType");
    nodes["SubscriptionDiagnosticsType"]->symbolic_name = "";
    nodes["SessionDiagnosticsArrayType"] = std::make_shared<ua_variable_type>();
    nodes["SessionDiagnosticsArrayType"]->node_id = ua_node_id(0, 2196);
    nodes["SessionDiagnosticsArrayType"]->browse_name = qualified_name("SessionDiagnosticsArrayType");
    nodes["SessionDiagnosticsArrayType"]->symbolic_name = "";
    nodes["SessionDiagnosticsVariableType"] = std::make_shared<ua_variable_type>();
    nodes["SessionDiagnosticsVariableType"]->node_id = ua_node_id(0, 2197);
    nodes["SessionDiagnosticsVariableType"]->browse_name = qualified_name("SessionDiagnosticsVariableType");
    nodes["SessionDiagnosticsVariableType"]->symbolic_name = "";
    nodes["SessionSecurityDiagnosticsArrayType"] = std::make_shared<ua_variable_type>();
    nodes["SessionSecurityDiagnosticsArrayType"]->node_id = ua_node_id(0, 2243);
    nodes["SessionSecurityDiagnosticsArrayType"]->browse_name = qualified_name("SessionSecurityDiagnosticsArrayType");
    nodes["SessionSecurityDiagnosticsArrayType"]->symbolic_name = "";
    nodes["SessionSecurityDiagnosticsType"] = std::make_shared<ua_variable_type>();
    nodes["SessionSecurityDiagnosticsType"]->node_id = ua_node_id(0, 2244);
    nodes["SessionSecurityDiagnosticsType"]->browse_name = qualified_name("SessionSecurityDiagnosticsType");
    nodes["SessionSecurityDiagnosticsType"]->symbolic_name = "";
    nodes["OptionSetType"] = std::make_shared<ua_variable_type>();
    nodes["OptionSetType"]->node_id = ua_node_id(0, 11487);
    nodes["OptionSetType"]->browse_name = qualified_name("OptionSetType");
    nodes["OptionSetType"]->symbolic_name = "";
    nodes["EventTypesFolder"] = std::make_shared<ua_object>();
    nodes["EventTypesFolder"]->node_id = ua_node_id(0, 3048);
    nodes["EventTypesFolder"]->browse_name = qualified_name("EventTypes");
    nodes["EventTypesFolder"]->symbolic_name = "EventTypesFolder";
    nodes["Server"] = std::make_shared<ua_object>();
    nodes["Server"]->node_id = ua_node_id(0, 2253);
    nodes["Server"]->browse_name = qualified_name("Server");
    nodes["Server"]->symbolic_name = "";
    nodes["ServerCapabilities"] = std::make_shared<ua_object>();
    nodes["ServerCapabilities"]->node_id = ua_node_id(0, 2268);
    nodes["ServerCapabilities"]->browse_name = qualified_name("ServerCapabilities");
    nodes["ServerCapabilities"]->symbolic_name = "";
    nodes["OperationLimits"] = std::make_shared<ua_object>();
    nodes["OperationLimits"]->node_id = ua_node_id(0, 11704);
    nodes["OperationLimits"]->browse_name = qualified_name("OperationLimits");
    nodes["OperationLimits"]->symbolic_name = "";
    nodes["ModellingRules"] = std::make_shared<ua_object>();
    nodes["ModellingRules"]->node_id = ua_node_id(0, 2996);
    nodes["ModellingRules"]->browse_name = qualified_name("ModellingRules");
    nodes["ModellingRules"]->symbolic_name = "";
    nodes["AggregateFunctions"] = std::make_shared<ua_object>();
    nodes["AggregateFunctions"]->node_id = ua_node_id(0, 2997);
    nodes["AggregateFunctions"]->browse_name = qualified_name("AggregateFunctions");
    nodes["AggregateFunctions"]->symbolic_name = "";
    nodes["ServerDiagnostics"] = std::make_shared<ua_object>();
    nodes["ServerDiagnostics"]->node_id = ua_node_id(0, 2274);
    nodes["ServerDiagnostics"]->browse_name = qualified_name("ServerDiagnostics");
    nodes["ServerDiagnostics"]->symbolic_name = "";
    nodes["SessionsDiagnosticsSummary"] = std::make_shared<ua_object>();
    nodes["SessionsDiagnosticsSummary"]->node_id = ua_node_id(0, 3706);
    nodes["SessionsDiagnosticsSummary"]->browse_name = qualified_name("SessionsDiagnosticsSummary");
    nodes["SessionsDiagnosticsSummary"]->symbolic_name = "";
    nodes["VendorServerInfo"] = std::make_shared<ua_object>();
    nodes["VendorServerInfo"]->node_id = ua_node_id(0, 2295);
    nodes["VendorServerInfo"]->browse_name = qualified_name("VendorServerInfo");
    nodes["VendorServerInfo"]->symbolic_name = "";
    nodes["ServerRedundancy"] = std::make_shared<ua_object>();
    nodes["ServerRedundancy"]->node_id = ua_node_id(0, 2296);
    nodes["ServerRedundancy"]->browse_name = qualified_name("ServerRedundancy");
    nodes["ServerRedundancy"]->symbolic_name = "";
    nodes["Namespaces"] = std::make_shared<ua_object>();
    nodes["Namespaces"]->node_id = ua_node_id(0, 11715);
    nodes["Namespaces"]->browse_name = qualified_name("Namespaces");
    nodes["Namespaces"]->symbolic_name = "";
    nodes["OPCUANamespaceUri"] = std::make_shared<ua_object>();
    nodes["OPCUANamespaceUri"]->node_id = ua_node_id(0, 15182);
    nodes["OPCUANamespaceUri"]->browse_name = qualified_name("0:http://opcfoundation.org/UA/");
    nodes["OPCUANamespaceUri"]->symbolic_name = "OPCUANamespaceUri";
    nodes["HistoryServerCapabilities"] = std::make_shared<ua_object>();
    nodes["HistoryServerCapabilities"]->node_id = ua_node_id(0, 11192);
    nodes["HistoryServerCapabilities"]->browse_name = qualified_name("HistoryServerCapabilities");
    nodes["HistoryServerCapabilities"]->symbolic_name = "";
    nodes["AggregateFunctions"] = std::make_shared<ua_object>();
    nodes["AggregateFunctions"]->node_id = ua_node_id(0, 11201);
    nodes["AggregateFunctions"]->browse_name = qualified_name("AggregateFunctions");
    nodes["AggregateFunctions"]->symbolic_name = "";
    nodes["StateMachineType"] = std::make_shared<ua_object_type>();
    nodes["StateMachineType"]->node_id = ua_node_id(0, 2299);
    nodes["StateMachineType"]->browse_name = qualified_name("StateMachineType");
    nodes["StateMachineType"]->symbolic_name = "";
    nodes["StateVariableType"] = std::make_shared<ua_variable_type>();
    nodes["StateVariableType"]->node_id = ua_node_id(0, 2755);
    nodes["StateVariableType"]->browse_name = qualified_name("StateVariableType");
    nodes["StateVariableType"]->symbolic_name = "";
    nodes["TransitionVariableType"] = std::make_shared<ua_variable_type>();
    nodes["TransitionVariableType"]->node_id = ua_node_id(0, 2762);
    nodes["TransitionVariableType"]->browse_name = qualified_name("TransitionVariableType");
    nodes["TransitionVariableType"]->symbolic_name = "";
    nodes["FiniteStateMachineType"] = std::make_shared<ua_object_type>();
    nodes["FiniteStateMachineType"]->node_id = ua_node_id(0, 2771);
    nodes["FiniteStateMachineType"]->browse_name = qualified_name("FiniteStateMachineType");
    nodes["FiniteStateMachineType"]->symbolic_name = "";
    nodes["FiniteStateVariableType"] = std::make_shared<ua_variable_type>();
    nodes["FiniteStateVariableType"]->node_id = ua_node_id(0, 2760);
    nodes["FiniteStateVariableType"]->browse_name = qualified_name("FiniteStateVariableType");
    nodes["FiniteStateVariableType"]->symbolic_name = "";
    nodes["FiniteTransitionVariableType"] = std::make_shared<ua_variable_type>();
    nodes["FiniteTransitionVariableType"]->node_id = ua_node_id(0, 2767);
    nodes["FiniteTransitionVariableType"]->browse_name = qualified_name("FiniteTransitionVariableType");
    nodes["FiniteTransitionVariableType"]->symbolic_name = "";
    nodes["StateType"] = std::make_shared<ua_object_type>();
    nodes["StateType"]->node_id = ua_node_id(0, 2307);
    nodes["StateType"]->browse_name = qualified_name("StateType");
    nodes["StateType"]->symbolic_name = "";
    nodes["InitialStateType"] = std::make_shared<ua_object_type>();
    nodes["InitialStateType"]->node_id = ua_node_id(0, 2309);
    nodes["InitialStateType"]->browse_name = qualified_name("InitialStateType");
    nodes["InitialStateType"]->symbolic_name = "";
    nodes["TransitionType"] = std::make_shared<ua_object_type>();
    nodes["TransitionType"]->node_id = ua_node_id(0, 2310);
    nodes["TransitionType"]->browse_name = qualified_name("TransitionType");
    nodes["TransitionType"]->symbolic_name = "";
    nodes["TransitionEventType"] = std::make_shared<ua_object_type>();
    nodes["TransitionEventType"]->node_id = ua_node_id(0, 2311);
    nodes["TransitionEventType"]->browse_name = qualified_name("TransitionEventType");
    nodes["TransitionEventType"]->symbolic_name = "";
    nodes["AuditUpdateStateEventType"] = std::make_shared<ua_object_type>();
    nodes["AuditUpdateStateEventType"]->node_id = ua_node_id(0, 2315);
    nodes["AuditUpdateStateEventType"]->browse_name = qualified_name("AuditUpdateStateEventType");
    nodes["AuditUpdateStateEventType"]->symbolic_name = "";
    nodes["DataItemType"] = std::make_shared<ua_variable_type>();
    nodes["DataItemType"]->node_id = ua_node_id(0, 2365);
    nodes["DataItemType"]->browse_name = qualified_name("DataItemType");
    nodes["DataItemType"]->symbolic_name = "";
    nodes["AnalogItemType"] = std::make_shared<ua_variable_type>();
    nodes["AnalogItemType"]->node_id = ua_node_id(0, 2368);
    nodes["AnalogItemType"]->browse_name = qualified_name("AnalogItemType");
    nodes["AnalogItemType"]->symbolic_name = "";
    nodes["DiscreteItemType"] = std::make_shared<ua_variable_type>();
    nodes["DiscreteItemType"]->node_id = ua_node_id(0, 2372);
    nodes["DiscreteItemType"]->browse_name = qualified_name("DiscreteItemType");
    nodes["DiscreteItemType"]->symbolic_name = "";
    nodes["TwoStateDiscreteType"] = std::make_shared<ua_variable_type>();
    nodes["TwoStateDiscreteType"]->node_id = ua_node_id(0, 2373);
    nodes["TwoStateDiscreteType"]->browse_name = qualified_name("TwoStateDiscreteType");
    nodes["TwoStateDiscreteType"]->symbolic_name = "";
    nodes["MultiStateDiscreteType"] = std::make_shared<ua_variable_type>();
    nodes["MultiStateDiscreteType"]->node_id = ua_node_id(0, 2376);
    nodes["MultiStateDiscreteType"]->browse_name = qualified_name("MultiStateDiscreteType");
    nodes["MultiStateDiscreteType"]->symbolic_name = "";
    nodes["MultiStateValueDiscreteType"] = std::make_shared<ua_variable_type>();
    nodes["MultiStateValueDiscreteType"]->node_id = ua_node_id(0, 11238);
    nodes["MultiStateValueDiscreteType"]->browse_name = qualified_name("MultiStateValueDiscreteType");
    nodes["MultiStateValueDiscreteType"]->symbolic_name = "";
    nodes["ArrayItemType"] = std::make_shared<ua_variable_type>();
    nodes["ArrayItemType"]->node_id = ua_node_id(0, 12021);
    nodes["ArrayItemType"]->browse_name = qualified_name("ArrayItemType");
    nodes["ArrayItemType"]->symbolic_name = "";
    nodes["YArrayItemType"] = std::make_shared<ua_variable_type>();
    nodes["YArrayItemType"]->node_id = ua_node_id(0, 12029);
    nodes["YArrayItemType"]->browse_name = qualified_name("YArrayItemType");
    nodes["YArrayItemType"]->symbolic_name = "";
    nodes["XYArrayItemType"] = std::make_shared<ua_variable_type>();
    nodes["XYArrayItemType"]->node_id = ua_node_id(0, 12038);
    nodes["XYArrayItemType"]->browse_name = qualified_name("XYArrayItemType");
    nodes["XYArrayItemType"]->symbolic_name = "";
    nodes["ImageItemType"] = std::make_shared<ua_variable_type>();
    nodes["ImageItemType"]->node_id = ua_node_id(0, 12047);
    nodes["ImageItemType"]->browse_name = qualified_name("ImageItemType");
    nodes["ImageItemType"]->symbolic_name = "";
    nodes["CubeItemType"] = std::make_shared<ua_variable_type>();
    nodes["CubeItemType"]->node_id = ua_node_id(0, 12057);
    nodes["CubeItemType"]->browse_name = qualified_name("CubeItemType");
    nodes["CubeItemType"]->symbolic_name = "";
    nodes["NDimensionArrayItemType"] = std::make_shared<ua_variable_type>();
    nodes["NDimensionArrayItemType"]->node_id = ua_node_id(0, 12068);
    nodes["NDimensionArrayItemType"]->browse_name = qualified_name("NDimensionArrayItemType");
    nodes["NDimensionArrayItemType"]->symbolic_name = "";
    nodes["TwoStateVariableType"] = std::make_shared<ua_variable_type>();
    nodes["TwoStateVariableType"]->node_id = ua_node_id(0, 8995);
    nodes["TwoStateVariableType"]->browse_name = qualified_name("TwoStateVariableType");
    nodes["TwoStateVariableType"]->symbolic_name = "";
    nodes["ConditionVariableType"] = std::make_shared<ua_variable_type>();
    nodes["ConditionVariableType"]->node_id = ua_node_id(0, 9002);
    nodes["ConditionVariableType"]->browse_name = qualified_name("ConditionVariableType");
    nodes["ConditionVariableType"]->symbolic_name = "";
    nodes["ConditionType"] = std::make_shared<ua_object_type>();
    nodes["ConditionType"]->node_id = ua_node_id(0, 2782);
    nodes["ConditionType"]->browse_name = qualified_name("ConditionType");
    nodes["ConditionType"]->symbolic_name = "";
    nodes["DialogConditionType"] = std::make_shared<ua_object_type>();
    nodes["DialogConditionType"]->node_id = ua_node_id(0, 2830);
    nodes["DialogConditionType"]->browse_name = qualified_name("DialogConditionType");
    nodes["DialogConditionType"]->symbolic_name = "";
    nodes["AcknowledgeableConditionType"] = std::make_shared<ua_object_type>();
    nodes["AcknowledgeableConditionType"]->node_id = ua_node_id(0, 2881);
    nodes["AcknowledgeableConditionType"]->browse_name = qualified_name("AcknowledgeableConditionType");
    nodes["AcknowledgeableConditionType"]->symbolic_name = "";
    nodes["AlarmConditionType"] = std::make_shared<ua_object_type>();
    nodes["AlarmConditionType"]->node_id = ua_node_id(0, 2915);
    nodes["AlarmConditionType"]->browse_name = qualified_name("AlarmConditionType");
    nodes["AlarmConditionType"]->symbolic_name = "";
    nodes["ShelvingState"] = std::make_shared<ua_object>();
    nodes["ShelvingState"]->node_id = ua_node_id(0, 9178);
    nodes["ShelvingState"]->browse_name = qualified_name("ShelvingState");
    nodes["ShelvingState"]->symbolic_name = "";
    nodes["ShelvedStateMachineType"] = std::make_shared<ua_object_type>();
    nodes["ShelvedStateMachineType"]->node_id = ua_node_id(0, 2929);
    nodes["ShelvedStateMachineType"]->browse_name = qualified_name("ShelvedStateMachineType");
    nodes["ShelvedStateMachineType"]->symbolic_name = "";
    nodes["Unshelved"] = std::make_shared<ua_object>();
    nodes["Unshelved"]->node_id = ua_node_id(0, 2930);
    nodes["Unshelved"]->browse_name = qualified_name("Unshelved");
    nodes["Unshelved"]->symbolic_name = "";
    nodes["TimedShelved"] = std::make_shared<ua_object>();
    nodes["TimedShelved"]->node_id = ua_node_id(0, 2932);
    nodes["TimedShelved"]->browse_name = qualified_name("TimedShelved");
    nodes["TimedShelved"]->symbolic_name = "";
    nodes["OneShotShelved"] = std::make_shared<ua_object>();
    nodes["OneShotShelved"]->node_id = ua_node_id(0, 2933);
    nodes["OneShotShelved"]->browse_name = qualified_name("OneShotShelved");
    nodes["OneShotShelved"]->symbolic_name = "";
    nodes["UnshelvedToTimedShelved"] = std::make_shared<ua_object>();
    nodes["UnshelvedToTimedShelved"]->node_id = ua_node_id(0, 2935);
    nodes["UnshelvedToTimedShelved"]->browse_name = qualified_name("UnshelvedToTimedShelved");
    nodes["UnshelvedToTimedShelved"]->symbolic_name = "";
    nodes["UnshelvedToOneShotShelved"] = std::make_shared<ua_object>();
    nodes["UnshelvedToOneShotShelved"]->node_id = ua_node_id(0, 2936);
    nodes["UnshelvedToOneShotShelved"]->browse_name = qualified_name("UnshelvedToOneShotShelved");
    nodes["UnshelvedToOneShotShelved"]->symbolic_name = "";
    nodes["TimedShelvedToUnshelved"] = std::make_shared<ua_object>();
    nodes["TimedShelvedToUnshelved"]->node_id = ua_node_id(0, 2940);
    nodes["TimedShelvedToUnshelved"]->browse_name = qualified_name("TimedShelvedToUnshelved");
    nodes["TimedShelvedToUnshelved"]->symbolic_name = "";
    nodes["TimedShelvedToOneShotShelved"] = std::make_shared<ua_object>();
    nodes["TimedShelvedToOneShotShelved"]->node_id = ua_node_id(0, 2942);
    nodes["TimedShelvedToOneShotShelved"]->browse_name = qualified_name("TimedShelvedToOneShotShelved");
    nodes["TimedShelvedToOneShotShelved"]->symbolic_name = "";
    nodes["OneShotShelvedToUnshelved"] = std::make_shared<ua_object>();
    nodes["OneShotShelvedToUnshelved"]->node_id = ua_node_id(0, 2943);
    nodes["OneShotShelvedToUnshelved"]->browse_name = qualified_name("OneShotShelvedToUnshelved");
    nodes["OneShotShelvedToUnshelved"]->symbolic_name = "";
    nodes["OneShotShelvedToTimedShelved"] = std::make_shared<ua_object>();
    nodes["OneShotShelvedToTimedShelved"]->node_id = ua_node_id(0, 2945);
    nodes["OneShotShelvedToTimedShelved"]->browse_name = qualified_name("OneShotShelvedToTimedShelved");
    nodes["OneShotShelvedToTimedShelved"]->symbolic_name = "";
    nodes["LimitAlarmType"] = std::make_shared<ua_object_type>();
    nodes["LimitAlarmType"]->node_id = ua_node_id(0, 2955);
    nodes["LimitAlarmType"]->browse_name = qualified_name("LimitAlarmType");
    nodes["LimitAlarmType"]->symbolic_name = "";
    nodes["ExclusiveLimitStateMachineType"] = std::make_shared<ua_object_type>();
    nodes["ExclusiveLimitStateMachineType"]->node_id = ua_node_id(0, 9318);
    nodes["ExclusiveLimitStateMachineType"]->browse_name = qualified_name("ExclusiveLimitStateMachineType");
    nodes["ExclusiveLimitStateMachineType"]->symbolic_name = "";
    nodes["HighHigh"] = std::make_shared<ua_object>();
    nodes["HighHigh"]->node_id = ua_node_id(0, 9329);
    nodes["HighHigh"]->browse_name = qualified_name("HighHigh");
    nodes["HighHigh"]->symbolic_name = "";
    nodes["High"] = std::make_shared<ua_object>();
    nodes["High"]->node_id = ua_node_id(0, 9331);
    nodes["High"]->browse_name = qualified_name("High");
    nodes["High"]->symbolic_name = "";
    nodes["Low"] = std::make_shared<ua_object>();
    nodes["Low"]->node_id = ua_node_id(0, 9333);
    nodes["Low"]->browse_name = qualified_name("Low");
    nodes["Low"]->symbolic_name = "";
    nodes["LowLow"] = std::make_shared<ua_object>();
    nodes["LowLow"]->node_id = ua_node_id(0, 9335);
    nodes["LowLow"]->browse_name = qualified_name("LowLow");
    nodes["LowLow"]->symbolic_name = "";
    nodes["LowLowToLow"] = std::make_shared<ua_object>();
    nodes["LowLowToLow"]->node_id = ua_node_id(0, 9337);
    nodes["LowLowToLow"]->browse_name = qualified_name("LowLowToLow");
    nodes["LowLowToLow"]->symbolic_name = "";
    nodes["LowToLowLow"] = std::make_shared<ua_object>();
    nodes["LowToLowLow"]->node_id = ua_node_id(0, 9338);
    nodes["LowToLowLow"]->browse_name = qualified_name("LowToLowLow");
    nodes["LowToLowLow"]->symbolic_name = "";
    nodes["HighHighToHigh"] = std::make_shared<ua_object>();
    nodes["HighHighToHigh"]->node_id = ua_node_id(0, 9339);
    nodes["HighHighToHigh"]->browse_name = qualified_name("HighHighToHigh");
    nodes["HighHighToHigh"]->symbolic_name = "";
    nodes["HighToHighHigh"] = std::make_shared<ua_object>();
    nodes["HighToHighHigh"]->node_id = ua_node_id(0, 9340);
    nodes["HighToHighHigh"]->browse_name = qualified_name("HighToHighHigh");
    nodes["HighToHighHigh"]->symbolic_name = "";
    nodes["ExclusiveLimitAlarmType"] = std::make_shared<ua_object_type>();
    nodes["ExclusiveLimitAlarmType"]->node_id = ua_node_id(0, 9341);
    nodes["ExclusiveLimitAlarmType"]->browse_name = qualified_name("ExclusiveLimitAlarmType");
    nodes["ExclusiveLimitAlarmType"]->symbolic_name = "";
    nodes["LimitState"] = std::make_shared<ua_object>();
    nodes["LimitState"]->node_id = ua_node_id(0, 9455);
    nodes["LimitState"]->browse_name = qualified_name("LimitState");
    nodes["LimitState"]->symbolic_name = "";
    nodes["NonExclusiveLimitAlarmType"] = std::make_shared<ua_object_type>();
    nodes["NonExclusiveLimitAlarmType"]->node_id = ua_node_id(0, 9906);
    nodes["NonExclusiveLimitAlarmType"]->browse_name = qualified_name("NonExclusiveLimitAlarmType");
    nodes["NonExclusiveLimitAlarmType"]->symbolic_name = "";
    nodes["NonExclusiveLevelAlarmType"] = std::make_shared<ua_object_type>();
    nodes["NonExclusiveLevelAlarmType"]->node_id = ua_node_id(0, 10060);
    nodes["NonExclusiveLevelAlarmType"]->browse_name = qualified_name("NonExclusiveLevelAlarmType");
    nodes["NonExclusiveLevelAlarmType"]->symbolic_name = "";
    nodes["ExclusiveLevelAlarmType"] = std::make_shared<ua_object_type>();
    nodes["ExclusiveLevelAlarmType"]->node_id = ua_node_id(0, 9482);
    nodes["ExclusiveLevelAlarmType"]->browse_name = qualified_name("ExclusiveLevelAlarmType");
    nodes["ExclusiveLevelAlarmType"]->symbolic_name = "";
    nodes["NonExclusiveDeviationAlarmType"] = std::make_shared<ua_object_type>();
    nodes["NonExclusiveDeviationAlarmType"]->node_id = ua_node_id(0, 10368);
    nodes["NonExclusiveDeviationAlarmType"]->browse_name = qualified_name("NonExclusiveDeviationAlarmType");
    nodes["NonExclusiveDeviationAlarmType"]->symbolic_name = "";
    nodes["ExclusiveDeviationAlarmType"] = std::make_shared<ua_object_type>();
    nodes["ExclusiveDeviationAlarmType"]->node_id = ua_node_id(0, 9764);
    nodes["ExclusiveDeviationAlarmType"]->browse_name = qualified_name("ExclusiveDeviationAlarmType");
    nodes["ExclusiveDeviationAlarmType"]->symbolic_name = "";
    nodes["NonExclusiveRateOfChangeAlarmType"] = std::make_shared<ua_object_type>();
    nodes["NonExclusiveRateOfChangeAlarmType"]->node_id = ua_node_id(0, 10214);
    nodes["NonExclusiveRateOfChangeAlarmType"]->browse_name = qualified_name("NonExclusiveRateOfChangeAlarmType");
    nodes["NonExclusiveRateOfChangeAlarmType"]->symbolic_name = "";
    nodes["ExclusiveRateOfChangeAlarmType"] = std::make_shared<ua_object_type>();
    nodes["ExclusiveRateOfChangeAlarmType"]->node_id = ua_node_id(0, 9623);
    nodes["ExclusiveRateOfChangeAlarmType"]->browse_name = qualified_name("ExclusiveRateOfChangeAlarmType");
    nodes["ExclusiveRateOfChangeAlarmType"]->symbolic_name = "";
    nodes["DiscreteAlarmType"] = std::make_shared<ua_object_type>();
    nodes["DiscreteAlarmType"]->node_id = ua_node_id(0, 10523);
    nodes["DiscreteAlarmType"]->browse_name = qualified_name("DiscreteAlarmType");
    nodes["DiscreteAlarmType"]->symbolic_name = "";
    nodes["OffNormalAlarmType"] = std::make_shared<ua_object_type>();
    nodes["OffNormalAlarmType"]->node_id = ua_node_id(0, 10637);
    nodes["OffNormalAlarmType"]->browse_name = qualified_name("OffNormalAlarmType");
    nodes["OffNormalAlarmType"]->symbolic_name = "";
    nodes["SystemOffNormalAlarmType"] = std::make_shared<ua_object_type>();
    nodes["SystemOffNormalAlarmType"]->node_id = ua_node_id(0, 11753);
    nodes["SystemOffNormalAlarmType"]->browse_name = qualified_name("SystemOffNormalAlarmType");
    nodes["SystemOffNormalAlarmType"]->symbolic_name = "";
    nodes["CertificateExpirationAlarmType"] = std::make_shared<ua_object_type>();
    nodes["CertificateExpirationAlarmType"]->node_id = ua_node_id(0, 13225);
    nodes["CertificateExpirationAlarmType"]->browse_name = qualified_name("CertificateExpirationAlarmType");
    nodes["CertificateExpirationAlarmType"]->symbolic_name = "";
    nodes["TripAlarmType"] = std::make_shared<ua_object_type>();
    nodes["TripAlarmType"]->node_id = ua_node_id(0, 10751);
    nodes["TripAlarmType"]->browse_name = qualified_name("TripAlarmType");
    nodes["TripAlarmType"]->symbolic_name = "";
    nodes["BaseConditionClassType"] = std::make_shared<ua_object_type>();
    nodes["BaseConditionClassType"]->node_id = ua_node_id(0, 11163);
    nodes["BaseConditionClassType"]->browse_name = qualified_name("BaseConditionClassType");
    nodes["BaseConditionClassType"]->symbolic_name = "";
    nodes["ProcessConditionClassType"] = std::make_shared<ua_object_type>();
    nodes["ProcessConditionClassType"]->node_id = ua_node_id(0, 11164);
    nodes["ProcessConditionClassType"]->browse_name = qualified_name("ProcessConditionClassType");
    nodes["ProcessConditionClassType"]->symbolic_name = "";
    nodes["MaintenanceConditionClassType"] = std::make_shared<ua_object_type>();
    nodes["MaintenanceConditionClassType"]->node_id = ua_node_id(0, 11165);
    nodes["MaintenanceConditionClassType"]->browse_name = qualified_name("MaintenanceConditionClassType");
    nodes["MaintenanceConditionClassType"]->symbolic_name = "";
    nodes["SystemConditionClassType"] = std::make_shared<ua_object_type>();
    nodes["SystemConditionClassType"]->node_id = ua_node_id(0, 11166);
    nodes["SystemConditionClassType"]->browse_name = qualified_name("SystemConditionClassType");
    nodes["SystemConditionClassType"]->symbolic_name = "";
    nodes["AuditConditionEventType"] = std::make_shared<ua_object_type>();
    nodes["AuditConditionEventType"]->node_id = ua_node_id(0, 2790);
    nodes["AuditConditionEventType"]->browse_name = qualified_name("AuditConditionEventType");
    nodes["AuditConditionEventType"]->symbolic_name = "";
    nodes["AuditConditionEnableEventType"] = std::make_shared<ua_object_type>();
    nodes["AuditConditionEnableEventType"]->node_id = ua_node_id(0, 2803);
    nodes["AuditConditionEnableEventType"]->browse_name = qualified_name("AuditConditionEnableEventType");
    nodes["AuditConditionEnableEventType"]->symbolic_name = "";
    nodes["AuditConditionCommentEventType"] = std::make_shared<ua_object_type>();
    nodes["AuditConditionCommentEventType"]->node_id = ua_node_id(0, 2829);
    nodes["AuditConditionCommentEventType"]->browse_name = qualified_name("AuditConditionCommentEventType");
    nodes["AuditConditionCommentEventType"]->symbolic_name = "";
    nodes["AuditConditionRespondEventType"] = std::make_shared<ua_object_type>();
    nodes["AuditConditionRespondEventType"]->node_id = ua_node_id(0, 8927);
    nodes["AuditConditionRespondEventType"]->browse_name = qualified_name("AuditConditionRespondEventType");
    nodes["AuditConditionRespondEventType"]->symbolic_name = "";
    nodes["AuditConditionAcknowledgeEventType"] = std::make_shared<ua_object_type>();
    nodes["AuditConditionAcknowledgeEventType"]->node_id = ua_node_id(0, 8944);
    nodes["AuditConditionAcknowledgeEventType"]->browse_name = qualified_name("AuditConditionAcknowledgeEventType");
    nodes["AuditConditionAcknowledgeEventType"]->symbolic_name = "";
    nodes["AuditConditionConfirmEventType"] = std::make_shared<ua_object_type>();
    nodes["AuditConditionConfirmEventType"]->node_id = ua_node_id(0, 8961);
    nodes["AuditConditionConfirmEventType"]->browse_name = qualified_name("AuditConditionConfirmEventType");
    nodes["AuditConditionConfirmEventType"]->symbolic_name = "";
    nodes["AuditConditionShelvingEventType"] = std::make_shared<ua_object_type>();
    nodes["AuditConditionShelvingEventType"]->node_id = ua_node_id(0, 11093);
    nodes["AuditConditionShelvingEventType"]->browse_name = qualified_name("AuditConditionShelvingEventType");
    nodes["AuditConditionShelvingEventType"]->symbolic_name = "";
    nodes["RefreshStartEventType"] = std::make_shared<ua_object_type>();
    nodes["RefreshStartEventType"]->node_id = ua_node_id(0, 2787);
    nodes["RefreshStartEventType"]->browse_name = qualified_name("RefreshStartEventType");
    nodes["RefreshStartEventType"]->symbolic_name = "";
    nodes["RefreshEndEventType"] = std::make_shared<ua_object_type>();
    nodes["RefreshEndEventType"]->node_id = ua_node_id(0, 2788);
    nodes["RefreshEndEventType"]->browse_name = qualified_name("RefreshEndEventType");
    nodes["RefreshEndEventType"]->symbolic_name = "";
    nodes["RefreshRequiredEventType"] = std::make_shared<ua_object_type>();
    nodes["RefreshRequiredEventType"]->node_id = ua_node_id(0, 2789);
    nodes["RefreshRequiredEventType"]->browse_name = qualified_name("RefreshRequiredEventType");
    nodes["RefreshRequiredEventType"]->symbolic_name = "";
    nodes["ProgramStateMachineType"] = std::make_shared<ua_object_type>();
    nodes["ProgramStateMachineType"]->node_id = ua_node_id(0, 2391);
    nodes["ProgramStateMachineType"]->browse_name = qualified_name("ProgramStateMachineType");
    nodes["ProgramStateMachineType"]->symbolic_name = "";
    nodes["FinalResultData"] = std::make_shared<ua_object>();
    nodes["FinalResultData"]->node_id = ua_node_id(0, 3850);
    nodes["FinalResultData"]->browse_name = qualified_name("FinalResultData");
    nodes["FinalResultData"]->symbolic_name = "";
    nodes["Ready"] = std::make_shared<ua_object>();
    nodes["Ready"]->node_id = ua_node_id(0, 2400);
    nodes["Ready"]->browse_name = qualified_name("Ready");
    nodes["Ready"]->symbolic_name = "";
    nodes["Running"] = std::make_shared<ua_object>();
    nodes["Running"]->node_id = ua_node_id(0, 2402);
    nodes["Running"]->browse_name = qualified_name("Running");
    nodes["Running"]->symbolic_name = "";
    nodes["Suspended"] = std::make_shared<ua_object>();
    nodes["Suspended"]->node_id = ua_node_id(0, 2404);
    nodes["Suspended"]->browse_name = qualified_name("Suspended");
    nodes["Suspended"]->symbolic_name = "";
    nodes["Halted"] = std::make_shared<ua_object>();
    nodes["Halted"]->node_id = ua_node_id(0, 2406);
    nodes["Halted"]->browse_name = qualified_name("Halted");
    nodes["Halted"]->symbolic_name = "";
    nodes["HaltedToReady"] = std::make_shared<ua_object>();
    nodes["HaltedToReady"]->node_id = ua_node_id(0, 2408);
    nodes["HaltedToReady"]->browse_name = qualified_name("HaltedToReady");
    nodes["HaltedToReady"]->symbolic_name = "";
    nodes["ReadyToRunning"] = std::make_shared<ua_object>();
    nodes["ReadyToRunning"]->node_id = ua_node_id(0, 2410);
    nodes["ReadyToRunning"]->browse_name = qualified_name("ReadyToRunning");
    nodes["ReadyToRunning"]->symbolic_name = "";
    nodes["RunningToHalted"] = std::make_shared<ua_object>();
    nodes["RunningToHalted"]->node_id = ua_node_id(0, 2412);
    nodes["RunningToHalted"]->browse_name = qualified_name("RunningToHalted");
    nodes["RunningToHalted"]->symbolic_name = "";
    nodes["RunningToReady"] = std::make_shared<ua_object>();
    nodes["RunningToReady"]->node_id = ua_node_id(0, 2414);
    nodes["RunningToReady"]->browse_name = qualified_name("RunningToReady");
    nodes["RunningToReady"]->symbolic_name = "";
    nodes["RunningToSuspended"] = std::make_shared<ua_object>();
    nodes["RunningToSuspended"]->node_id = ua_node_id(0, 2416);
    nodes["RunningToSuspended"]->browse_name = qualified_name("RunningToSuspended");
    nodes["RunningToSuspended"]->symbolic_name = "";
    nodes["SuspendedToRunning"] = std::make_shared<ua_object>();
    nodes["SuspendedToRunning"]->node_id = ua_node_id(0, 2418);
    nodes["SuspendedToRunning"]->browse_name = qualified_name("SuspendedToRunning");
    nodes["SuspendedToRunning"]->symbolic_name = "";
    nodes["SuspendedToHalted"] = std::make_shared<ua_object>();
    nodes["SuspendedToHalted"]->node_id = ua_node_id(0, 2420);
    nodes["SuspendedToHalted"]->browse_name = qualified_name("SuspendedToHalted");
    nodes["SuspendedToHalted"]->symbolic_name = "";
    nodes["SuspendedToReady"] = std::make_shared<ua_object>();
    nodes["SuspendedToReady"]->node_id = ua_node_id(0, 2422);
    nodes["SuspendedToReady"]->browse_name = qualified_name("SuspendedToReady");
    nodes["SuspendedToReady"]->symbolic_name = "";
    nodes["ReadyToHalted"] = std::make_shared<ua_object>();
    nodes["ReadyToHalted"]->node_id = ua_node_id(0, 2424);
    nodes["ReadyToHalted"]->browse_name = qualified_name("ReadyToHalted");
    nodes["ReadyToHalted"]->symbolic_name = "";
    nodes["ProgramTransitionEventType"] = std::make_shared<ua_object_type>();
    nodes["ProgramTransitionEventType"]->node_id = ua_node_id(0, 2378);
    nodes["ProgramTransitionEventType"]->browse_name = qualified_name("ProgramTransitionEventType");
    nodes["ProgramTransitionEventType"]->symbolic_name = "";
    nodes["AuditProgramTransitionEventType"] = std::make_shared<ua_object_type>();
    nodes["AuditProgramTransitionEventType"]->node_id = ua_node_id(0, 11856);
    nodes["AuditProgramTransitionEventType"]->browse_name = qualified_name("AuditProgramTransitionEventType");
    nodes["AuditProgramTransitionEventType"]->symbolic_name = "";
    nodes["ProgramTransitionAuditEventType"] = std::make_shared<ua_object_type>();
    nodes["ProgramTransitionAuditEventType"]->node_id = ua_node_id(0, 3806);
    nodes["ProgramTransitionAuditEventType"]->browse_name = qualified_name("ProgramTransitionAuditEventType");
    nodes["ProgramTransitionAuditEventType"]->symbolic_name = "";
    nodes["ProgramDiagnosticType"] = std::make_shared<ua_variable_type>();
    nodes["ProgramDiagnosticType"]->node_id = ua_node_id(0, 2380);
    nodes["ProgramDiagnosticType"]->browse_name = qualified_name("ProgramDiagnosticType");
    nodes["ProgramDiagnosticType"]->symbolic_name = "";
    nodes["HistoricalDataConfigurationType"] = std::make_shared<ua_object_type>();
    nodes["HistoricalDataConfigurationType"]->node_id = ua_node_id(0, 2318);
    nodes["HistoricalDataConfigurationType"]->browse_name = qualified_name("HistoricalDataConfigurationType");
    nodes["HistoricalDataConfigurationType"]->symbolic_name = "";
    nodes["AggregateConfiguration"] = std::make_shared<ua_object>();
    nodes["AggregateConfiguration"]->node_id = ua_node_id(0, 3059);
    nodes["AggregateConfiguration"]->browse_name = qualified_name("AggregateConfiguration");
    nodes["AggregateConfiguration"]->symbolic_name = "";
    nodes["AggregateFunctions"] = std::make_shared<ua_object>();
    nodes["AggregateFunctions"]->node_id = ua_node_id(0, 11876);
    nodes["AggregateFunctions"]->browse_name = qualified_name("AggregateFunctions");
    nodes["AggregateFunctions"]->symbolic_name = "";
    nodes["HAConfiguration"] = std::make_shared<ua_object>();
    nodes["HAConfiguration"]->node_id = ua_node_id(0, 11202);
    nodes["HAConfiguration"]->browse_name = qualified_name("HA Configuration");
    nodes["HAConfiguration"]->symbolic_name = "HAConfiguration";
    nodes["AggregateConfiguration"] = std::make_shared<ua_object>();
    nodes["AggregateConfiguration"]->node_id = ua_node_id(0, 11203);
    nodes["AggregateConfiguration"]->browse_name = qualified_name("AggregateConfiguration");
    nodes["AggregateConfiguration"]->symbolic_name = "";
    nodes["HistoryServerCapabilitiesType"] = std::make_shared<ua_object_type>();
    nodes["HistoryServerCapabilitiesType"]->node_id = ua_node_id(0, 2330);
    nodes["HistoryServerCapabilitiesType"]->browse_name = qualified_name("HistoryServerCapabilitiesType");
    nodes["HistoryServerCapabilitiesType"]->symbolic_name = "";
    nodes["AggregateFunctions"] = std::make_shared<ua_object>();
    nodes["AggregateFunctions"]->node_id = ua_node_id(0, 11172);
    nodes["AggregateFunctions"]->browse_name = qualified_name("AggregateFunctions");
    nodes["AggregateFunctions"]->symbolic_name = "";
    nodes["AuditHistoryEventUpdateEventType"] = std::make_shared<ua_object_type>();
    nodes["AuditHistoryEventUpdateEventType"]->node_id = ua_node_id(0, 2999);
    nodes["AuditHistoryEventUpdateEventType"]->browse_name = qualified_name("AuditHistoryEventUpdateEventType");
    nodes["AuditHistoryEventUpdateEventType"]->symbolic_name = "";
    nodes["AuditHistoryValueUpdateEventType"] = std::make_shared<ua_object_type>();
    nodes["AuditHistoryValueUpdateEventType"]->node_id = ua_node_id(0, 3006);
    nodes["AuditHistoryValueUpdateEventType"]->browse_name = qualified_name("AuditHistoryValueUpdateEventType");
    nodes["AuditHistoryValueUpdateEventType"]->symbolic_name = "";
    nodes["AuditHistoryDeleteEventType"] = std::make_shared<ua_object_type>();
    nodes["AuditHistoryDeleteEventType"]->node_id = ua_node_id(0, 3012);
    nodes["AuditHistoryDeleteEventType"]->browse_name = qualified_name("AuditHistoryDeleteEventType");
    nodes["AuditHistoryDeleteEventType"]->symbolic_name = "";
    nodes["AuditHistoryRawModifyDeleteEventType"] = std::make_shared<ua_object_type>();
    nodes["AuditHistoryRawModifyDeleteEventType"]->node_id = ua_node_id(0, 3014);
    nodes["AuditHistoryRawModifyDeleteEventType"]->browse_name = qualified_name("AuditHistoryRawModifyDeleteEventType");
    nodes["AuditHistoryRawModifyDeleteEventType"]->symbolic_name = "";
    nodes["AuditHistoryAtTimeDeleteEventType"] = std::make_shared<ua_object_type>();
    nodes["AuditHistoryAtTimeDeleteEventType"]->node_id = ua_node_id(0, 3019);
    nodes["AuditHistoryAtTimeDeleteEventType"]->browse_name = qualified_name("AuditHistoryAtTimeDeleteEventType");
    nodes["AuditHistoryAtTimeDeleteEventType"]->symbolic_name = "";
    nodes["AuditHistoryEventDeleteEventType"] = std::make_shared<ua_object_type>();
    nodes["AuditHistoryEventDeleteEventType"]->node_id = ua_node_id(0, 3022);
    nodes["AuditHistoryEventDeleteEventType"]->browse_name = qualified_name("AuditHistoryEventDeleteEventType");
    nodes["AuditHistoryEventDeleteEventType"]->symbolic_name = "";
    nodes["TrustListType"] = std::make_shared<ua_object_type>();
    nodes["TrustListType"]->node_id = ua_node_id(0, 12522);
    nodes["TrustListType"]->browse_name = qualified_name("TrustListType");
    nodes["TrustListType"]->symbolic_name = "";
    nodes["CertificateGroupType"] = std::make_shared<ua_object_type>();
    nodes["CertificateGroupType"]->node_id = ua_node_id(0, 12555);
    nodes["CertificateGroupType"]->browse_name = qualified_name("CertificateGroupType");
    nodes["CertificateGroupType"]->symbolic_name = "";
    nodes["TrustList"] = std::make_shared<ua_object>();
    nodes["TrustList"]->node_id = ua_node_id(0, 13599);
    nodes["TrustList"]->browse_name = qualified_name("TrustList");
    nodes["TrustList"]->symbolic_name = "";
    nodes["CertificateGroupFolderType"] = std::make_shared<ua_object_type>();
    nodes["CertificateGroupFolderType"]->node_id = ua_node_id(0, 13813);
    nodes["CertificateGroupFolderType"]->browse_name = qualified_name("CertificateGroupFolderType");
    nodes["CertificateGroupFolderType"]->symbolic_name = "";
    nodes["DefaultApplicationGroup"] = std::make_shared<ua_object>();
    nodes["DefaultApplicationGroup"]->node_id = ua_node_id(0, 13814);
    nodes["DefaultApplicationGroup"]->browse_name = qualified_name("DefaultApplicationGroup");
    nodes["DefaultApplicationGroup"]->symbolic_name = "";
    nodes["TrustList"] = std::make_shared<ua_object>();
    nodes["TrustList"]->node_id = ua_node_id(0, 13815);
    nodes["TrustList"]->browse_name = qualified_name("TrustList");
    nodes["TrustList"]->symbolic_name = "";
    nodes["DefaultHttpsGroup"] = std::make_shared<ua_object>();
    nodes["DefaultHttpsGroup"]->node_id = ua_node_id(0, 13848);
    nodes["DefaultHttpsGroup"]->browse_name = qualified_name("DefaultHttpsGroup");
    nodes["DefaultHttpsGroup"]->symbolic_name = "";
    nodes["TrustList"] = std::make_shared<ua_object>();
    nodes["TrustList"]->node_id = ua_node_id(0, 13849);
    nodes["TrustList"]->browse_name = qualified_name("TrustList");
    nodes["TrustList"]->symbolic_name = "";
    nodes["DefaultUserTokenGroup"] = std::make_shared<ua_object>();
    nodes["DefaultUserTokenGroup"]->node_id = ua_node_id(0, 13882);
    nodes["DefaultUserTokenGroup"]->browse_name = qualified_name("DefaultUserTokenGroup");
    nodes["DefaultUserTokenGroup"]->symbolic_name = "";
    nodes["TrustList"] = std::make_shared<ua_object>();
    nodes["TrustList"]->node_id = ua_node_id(0, 13883);
    nodes["TrustList"]->browse_name = qualified_name("TrustList");
    nodes["TrustList"]->symbolic_name = "";
    nodes["AdditionalGroup_Placeholder"] = std::make_shared<ua_object>();
    nodes["AdditionalGroup_Placeholder"]->node_id = ua_node_id(0, 13916);
    nodes["AdditionalGroup_Placeholder"]->browse_name = qualified_name("<AdditionalGroup>");
    nodes["AdditionalGroup_Placeholder"]->symbolic_name = "AdditionalGroup_Placeholder";
    nodes["TrustList"] = std::make_shared<ua_object>();
    nodes["TrustList"]->node_id = ua_node_id(0, 13917);
    nodes["TrustList"]->browse_name = qualified_name("TrustList");
    nodes["TrustList"]->symbolic_name = "";
    nodes["CertificateType"] = std::make_shared<ua_object_type>();
    nodes["CertificateType"]->node_id = ua_node_id(0, 12556);
    nodes["CertificateType"]->browse_name = qualified_name("CertificateType");
    nodes["CertificateType"]->symbolic_name = "";
    nodes["ApplicationCertificateType"] = std::make_shared<ua_object_type>();
    nodes["ApplicationCertificateType"]->node_id = ua_node_id(0, 12557);
    nodes["ApplicationCertificateType"]->browse_name = qualified_name("ApplicationCertificateType");
    nodes["ApplicationCertificateType"]->symbolic_name = "";
    nodes["HttpsCertificateType"] = std::make_shared<ua_object_type>();
    nodes["HttpsCertificateType"]->node_id = ua_node_id(0, 12558);
    nodes["HttpsCertificateType"]->browse_name = qualified_name("HttpsCertificateType");
    nodes["HttpsCertificateType"]->symbolic_name = "";
    nodes["RsaMinApplicationCertificateType"] = std::make_shared<ua_object_type>();
    nodes["RsaMinApplicationCertificateType"]->node_id = ua_node_id(0, 12559);
    nodes["RsaMinApplicationCertificateType"]->browse_name = qualified_name("RsaMinApplicationCertificateType");
    nodes["RsaMinApplicationCertificateType"]->symbolic_name = "";
    nodes["RsaSha256ApplicationCertificateType"] = std::make_shared<ua_object_type>();
    nodes["RsaSha256ApplicationCertificateType"]->node_id = ua_node_id(0, 12560);
    nodes["RsaSha256ApplicationCertificateType"]->browse_name = qualified_name("RsaSha256ApplicationCertificateType");
    nodes["RsaSha256ApplicationCertificateType"]->symbolic_name = "";
    nodes["TrustListUpdatedAuditEventType"] = std::make_shared<ua_object_type>();
    nodes["TrustListUpdatedAuditEventType"]->node_id = ua_node_id(0, 12561);
    nodes["TrustListUpdatedAuditEventType"]->browse_name = qualified_name("TrustListUpdatedAuditEventType");
    nodes["TrustListUpdatedAuditEventType"]->symbolic_name = "";
    nodes["ServerConfigurationType"] = std::make_shared<ua_object_type>();
    nodes["ServerConfigurationType"]->node_id = ua_node_id(0, 12581);
    nodes["ServerConfigurationType"]->browse_name = qualified_name("ServerConfigurationType");
    nodes["ServerConfigurationType"]->symbolic_name = "";
    nodes["CertificateGroups"] = std::make_shared<ua_object>();
    nodes["CertificateGroups"]->node_id = ua_node_id(0, 13950);
    nodes["CertificateGroups"]->browse_name = qualified_name("CertificateGroups");
    nodes["CertificateGroups"]->symbolic_name = "";
    nodes["DefaultApplicationGroup"] = std::make_shared<ua_object>();
    nodes["DefaultApplicationGroup"]->node_id = ua_node_id(0, 13951);
    nodes["DefaultApplicationGroup"]->browse_name = qualified_name("DefaultApplicationGroup");
    nodes["DefaultApplicationGroup"]->symbolic_name = "";
    nodes["TrustList"] = std::make_shared<ua_object>();
    nodes["TrustList"]->node_id = ua_node_id(0, 13952);
    nodes["TrustList"]->browse_name = qualified_name("TrustList");
    nodes["TrustList"]->symbolic_name = "";
    nodes["CertificateUpdatedAuditEventType"] = std::make_shared<ua_object_type>();
    nodes["CertificateUpdatedAuditEventType"]->node_id = ua_node_id(0, 12620);
    nodes["CertificateUpdatedAuditEventType"]->browse_name = qualified_name("CertificateUpdatedAuditEventType");
    nodes["CertificateUpdatedAuditEventType"]->symbolic_name = "";
    nodes["ServerConfiguration"] = std::make_shared<ua_object>();
    nodes["ServerConfiguration"]->node_id = ua_node_id(0, 12637);
    nodes["ServerConfiguration"]->browse_name = qualified_name("ServerConfiguration");
    nodes["ServerConfiguration"]->symbolic_name = "";
    nodes["CertificateGroups"] = std::make_shared<ua_object>();
    nodes["CertificateGroups"]->node_id = ua_node_id(0, 14053);
    nodes["CertificateGroups"]->browse_name = qualified_name("CertificateGroups");
    nodes["CertificateGroups"]->symbolic_name = "";
    nodes["DefaultApplicationGroup"] = std::make_shared<ua_object>();
    nodes["DefaultApplicationGroup"]->node_id = ua_node_id(0, 14156);
    nodes["DefaultApplicationGroup"]->browse_name = qualified_name("DefaultApplicationGroup");
    nodes["DefaultApplicationGroup"]->symbolic_name = "";
    nodes["TrustList"] = std::make_shared<ua_object>();
    nodes["TrustList"]->node_id = ua_node_id(0, 12642);
    nodes["TrustList"]->browse_name = qualified_name("TrustList");
    nodes["TrustList"]->symbolic_name = "";
    nodes["DefaultHttpsGroup"] = std::make_shared<ua_object>();
    nodes["DefaultHttpsGroup"]->node_id = ua_node_id(0, 14088);
    nodes["DefaultHttpsGroup"]->browse_name = qualified_name("DefaultHttpsGroup");
    nodes["DefaultHttpsGroup"]->symbolic_name = "";
    nodes["TrustList"] = std::make_shared<ua_object>();
    nodes["TrustList"]->node_id = ua_node_id(0, 14089);
    nodes["TrustList"]->browse_name = qualified_name("TrustList");
    nodes["TrustList"]->symbolic_name = "";
    nodes["DefaultUserTokenGroup"] = std::make_shared<ua_object>();
    nodes["DefaultUserTokenGroup"]->node_id = ua_node_id(0, 14122);
    nodes["DefaultUserTokenGroup"]->browse_name = qualified_name("DefaultUserTokenGroup");
    nodes["DefaultUserTokenGroup"]->symbolic_name = "";
    nodes["TrustList"] = std::make_shared<ua_object>();
    nodes["TrustList"]->node_id = ua_node_id(0, 14123);
    nodes["TrustList"]->browse_name = qualified_name("TrustList");
    nodes["TrustList"]->symbolic_name = "";
    nodes["AggregateConfigurationType"] = std::make_shared<ua_object_type>();
    nodes["AggregateConfigurationType"]->node_id = ua_node_id(0, 11187);
    nodes["AggregateConfigurationType"]->browse_name = qualified_name("AggregateConfigurationType");
    nodes["AggregateConfigurationType"]->symbolic_name = "";
    nodes["AggregateFunction_Interpolative"] = std::make_shared<ua_object>();
    nodes["AggregateFunction_Interpolative"]->node_id = ua_node_id(0, 2341);
    nodes["AggregateFunction_Interpolative"]->browse_name = qualified_name("Interpolative");
    nodes["AggregateFunction_Interpolative"]->symbolic_name = "AggregateFunction_Interpolative";
    nodes["AggregateFunction_Average"] = std::make_shared<ua_object>();
    nodes["AggregateFunction_Average"]->node_id = ua_node_id(0, 2342);
    nodes["AggregateFunction_Average"]->browse_name = qualified_name("Average");
    nodes["AggregateFunction_Average"]->symbolic_name = "AggregateFunction_Average";
    nodes["AggregateFunction_TimeAverage"] = std::make_shared<ua_object>();
    nodes["AggregateFunction_TimeAverage"]->node_id = ua_node_id(0, 2343);
    nodes["AggregateFunction_TimeAverage"]->browse_name = qualified_name("TimeAverage");
    nodes["AggregateFunction_TimeAverage"]->symbolic_name = "AggregateFunction_TimeAverage";
    nodes["AggregateFunction_TimeAverage2"] = std::make_shared<ua_object>();
    nodes["AggregateFunction_TimeAverage2"]->node_id = ua_node_id(0, 11285);
    nodes["AggregateFunction_TimeAverage2"]->browse_name = qualified_name("TimeAverage2");
    nodes["AggregateFunction_TimeAverage2"]->symbolic_name = "AggregateFunction_TimeAverage2";
    nodes["AggregateFunction_Total"] = std::make_shared<ua_object>();
    nodes["AggregateFunction_Total"]->node_id = ua_node_id(0, 2344);
    nodes["AggregateFunction_Total"]->browse_name = qualified_name("Total");
    nodes["AggregateFunction_Total"]->symbolic_name = "AggregateFunction_Total";
    nodes["AggregateFunction_Total2"] = std::make_shared<ua_object>();
    nodes["AggregateFunction_Total2"]->node_id = ua_node_id(0, 11304);
    nodes["AggregateFunction_Total2"]->browse_name = qualified_name("Total2");
    nodes["AggregateFunction_Total2"]->symbolic_name = "AggregateFunction_Total2";
    nodes["AggregateFunction_Minimum"] = std::make_shared<ua_object>();
    nodes["AggregateFunction_Minimum"]->node_id = ua_node_id(0, 2346);
    nodes["AggregateFunction_Minimum"]->browse_name = qualified_name("Minimum");
    nodes["AggregateFunction_Minimum"]->symbolic_name = "AggregateFunction_Minimum";
    nodes["AggregateFunction_Maximum"] = std::make_shared<ua_object>();
    nodes["AggregateFunction_Maximum"]->node_id = ua_node_id(0, 2347);
    nodes["AggregateFunction_Maximum"]->browse_name = qualified_name("Maximum");
    nodes["AggregateFunction_Maximum"]->symbolic_name = "AggregateFunction_Maximum";
    nodes["AggregateFunction_MinimumActualTime"] = std::make_shared<ua_object>();
    nodes["AggregateFunction_MinimumActualTime"]->node_id = ua_node_id(0, 2348);
    nodes["AggregateFunction_MinimumActualTime"]->browse_name = qualified_name("MinimumActualTime");
    nodes["AggregateFunction_MinimumActualTime"]->symbolic_name = "AggregateFunction_MinimumActualTime";
    nodes["AggregateFunction_MaximumActualTime"] = std::make_shared<ua_object>();
    nodes["AggregateFunction_MaximumActualTime"]->node_id = ua_node_id(0, 2349);
    nodes["AggregateFunction_MaximumActualTime"]->browse_name = qualified_name("MaximumActualTime");
    nodes["AggregateFunction_MaximumActualTime"]->symbolic_name = "AggregateFunction_MaximumActualTime";
    nodes["AggregateFunction_Range"] = std::make_shared<ua_object>();
    nodes["AggregateFunction_Range"]->node_id = ua_node_id(0, 2350);
    nodes["AggregateFunction_Range"]->browse_name = qualified_name("Range");
    nodes["AggregateFunction_Range"]->symbolic_name = "AggregateFunction_Range";
    nodes["AggregateFunction_Minimum2"] = std::make_shared<ua_object>();
    nodes["AggregateFunction_Minimum2"]->node_id = ua_node_id(0, 11286);
    nodes["AggregateFunction_Minimum2"]->browse_name = qualified_name("Minimum2");
    nodes["AggregateFunction_Minimum2"]->symbolic_name = "AggregateFunction_Minimum2";
    nodes["AggregateFunction_Maximum2"] = std::make_shared<ua_object>();
    nodes["AggregateFunction_Maximum2"]->node_id = ua_node_id(0, 11287);
    nodes["AggregateFunction_Maximum2"]->browse_name = qualified_name("Maximum2");
    nodes["AggregateFunction_Maximum2"]->symbolic_name = "AggregateFunction_Maximum2";
    nodes["AggregateFunction_MinimumActualTime2"] = std::make_shared<ua_object>();
    nodes["AggregateFunction_MinimumActualTime2"]->node_id = ua_node_id(0, 11305);
    nodes["AggregateFunction_MinimumActualTime2"]->browse_name = qualified_name("MinimumActualTime2");
    nodes["AggregateFunction_MinimumActualTime2"]->symbolic_name = "AggregateFunction_MinimumActualTime2";
    nodes["AggregateFunction_MaximumActualTime2"] = std::make_shared<ua_object>();
    nodes["AggregateFunction_MaximumActualTime2"]->node_id = ua_node_id(0, 11306);
    nodes["AggregateFunction_MaximumActualTime2"]->browse_name = qualified_name("MaximumActualTime2");
    nodes["AggregateFunction_MaximumActualTime2"]->symbolic_name = "AggregateFunction_MaximumActualTime2";
    nodes["AggregateFunction_Range2"] = std::make_shared<ua_object>();
    nodes["AggregateFunction_Range2"]->node_id = ua_node_id(0, 11288);
    nodes["AggregateFunction_Range2"]->browse_name = qualified_name("Range2");
    nodes["AggregateFunction_Range2"]->symbolic_name = "AggregateFunction_Range2";
    nodes["AggregateFunction_AnnotationCount"] = std::make_shared<ua_object>();
    nodes["AggregateFunction_AnnotationCount"]->node_id = ua_node_id(0, 2351);
    nodes["AggregateFunction_AnnotationCount"]->browse_name = qualified_name("AnnotationCount");
    nodes["AggregateFunction_AnnotationCount"]->symbolic_name = "AggregateFunction_AnnotationCount";
    nodes["AggregateFunction_Count"] = std::make_shared<ua_object>();
    nodes["AggregateFunction_Count"]->node_id = ua_node_id(0, 2352);
    nodes["AggregateFunction_Count"]->browse_name = qualified_name("Count");
    nodes["AggregateFunction_Count"]->symbolic_name = "AggregateFunction_Count";
    nodes["AggregateFunction_DurationInStateZero"] = std::make_shared<ua_object>();
    nodes["AggregateFunction_DurationInStateZero"]->node_id = ua_node_id(0, 11307);
    nodes["AggregateFunction_DurationInStateZero"]->browse_name = qualified_name("DurationInStateZero");
    nodes["AggregateFunction_DurationInStateZero"]->symbolic_name = "AggregateFunction_DurationInStateZero";
    nodes["AggregateFunction_DurationInStateNonZero"] = std::make_shared<ua_object>();
    nodes["AggregateFunction_DurationInStateNonZero"]->node_id = ua_node_id(0, 11308);
    nodes["AggregateFunction_DurationInStateNonZero"]->browse_name = qualified_name("DurationInStateNonZero");
    nodes["AggregateFunction_DurationInStateNonZero"]->symbolic_name = "AggregateFunction_DurationInStateNonZero";
    nodes["AggregateFunction_NumberOfTransitions"] = std::make_shared<ua_object>();
    nodes["AggregateFunction_NumberOfTransitions"]->node_id = ua_node_id(0, 2355);
    nodes["AggregateFunction_NumberOfTransitions"]->browse_name = qualified_name("NumberOfTransitions");
    nodes["AggregateFunction_NumberOfTransitions"]->symbolic_name = "AggregateFunction_NumberOfTransitions";
    nodes["AggregateFunction_Start"] = std::make_shared<ua_object>();
    nodes["AggregateFunction_Start"]->node_id = ua_node_id(0, 2357);
    nodes["AggregateFunction_Start"]->browse_name = qualified_name("Start");
    nodes["AggregateFunction_Start"]->symbolic_name = "AggregateFunction_Start";
    nodes["AggregateFunction_End"] = std::make_shared<ua_object>();
    nodes["AggregateFunction_End"]->node_id = ua_node_id(0, 2358);
    nodes["AggregateFunction_End"]->browse_name = qualified_name("End");
    nodes["AggregateFunction_End"]->symbolic_name = "AggregateFunction_End";
    nodes["AggregateFunction_Delta"] = std::make_shared<ua_object>();
    nodes["AggregateFunction_Delta"]->node_id = ua_node_id(0, 2359);
    nodes["AggregateFunction_Delta"]->browse_name = qualified_name("Delta");
    nodes["AggregateFunction_Delta"]->symbolic_name = "AggregateFunction_Delta";
    nodes["AggregateFunction_StartBound"] = std::make_shared<ua_object>();
    nodes["AggregateFunction_StartBound"]->node_id = ua_node_id(0, 11505);
    nodes["AggregateFunction_StartBound"]->browse_name = qualified_name("StartBound");
    nodes["AggregateFunction_StartBound"]->symbolic_name = "AggregateFunction_StartBound";
    nodes["AggregateFunction_EndBound"] = std::make_shared<ua_object>();
    nodes["AggregateFunction_EndBound"]->node_id = ua_node_id(0, 11506);
    nodes["AggregateFunction_EndBound"]->browse_name = qualified_name("EndBound");
    nodes["AggregateFunction_EndBound"]->symbolic_name = "AggregateFunction_EndBound";
    nodes["AggregateFunction_DeltaBounds"] = std::make_shared<ua_object>();
    nodes["AggregateFunction_DeltaBounds"]->node_id = ua_node_id(0, 11507);
    nodes["AggregateFunction_DeltaBounds"]->browse_name = qualified_name("DeltaBounds");
    nodes["AggregateFunction_DeltaBounds"]->symbolic_name = "AggregateFunction_DeltaBounds";
    nodes["AggregateFunction_DurationGood"] = std::make_shared<ua_object>();
    nodes["AggregateFunction_DurationGood"]->node_id = ua_node_id(0, 2360);
    nodes["AggregateFunction_DurationGood"]->browse_name = qualified_name("DurationGood");
    nodes["AggregateFunction_DurationGood"]->symbolic_name = "AggregateFunction_DurationGood";
    nodes["AggregateFunction_DurationBad"] = std::make_shared<ua_object>();
    nodes["AggregateFunction_DurationBad"]->node_id = ua_node_id(0, 2361);
    nodes["AggregateFunction_DurationBad"]->browse_name = qualified_name("DurationBad");
    nodes["AggregateFunction_DurationBad"]->symbolic_name = "AggregateFunction_DurationBad";
    nodes["AggregateFunction_PercentGood"] = std::make_shared<ua_object>();
    nodes["AggregateFunction_PercentGood"]->node_id = ua_node_id(0, 2362);
    nodes["AggregateFunction_PercentGood"]->browse_name = qualified_name("PercentGood");
    nodes["AggregateFunction_PercentGood"]->symbolic_name = "AggregateFunction_PercentGood";
    nodes["AggregateFunction_PercentBad"] = std::make_shared<ua_object>();
    nodes["AggregateFunction_PercentBad"]->node_id = ua_node_id(0, 2363);
    nodes["AggregateFunction_PercentBad"]->browse_name = qualified_name("PercentBad");
    nodes["AggregateFunction_PercentBad"]->symbolic_name = "AggregateFunction_PercentBad";
    nodes["AggregateFunction_WorstQuality"] = std::make_shared<ua_object>();
    nodes["AggregateFunction_WorstQuality"]->node_id = ua_node_id(0, 2364);
    nodes["AggregateFunction_WorstQuality"]->browse_name = qualified_name("WorstQuality");
    nodes["AggregateFunction_WorstQuality"]->symbolic_name = "AggregateFunction_WorstQuality";
    nodes["AggregateFunction_WorstQuality2"] = std::make_shared<ua_object>();
    nodes["AggregateFunction_WorstQuality2"]->node_id = ua_node_id(0, 11292);
    nodes["AggregateFunction_WorstQuality2"]->browse_name = qualified_name("WorstQuality2");
    nodes["AggregateFunction_WorstQuality2"]->symbolic_name = "AggregateFunction_WorstQuality2";
    nodes["AggregateFunction_StandardDeviationSample"] = std::make_shared<ua_object>();
    nodes["AggregateFunction_StandardDeviationSample"]->node_id = ua_node_id(0, 11426);
    nodes["AggregateFunction_StandardDeviationSample"]->browse_name = qualified_name("StandardDeviationSample");
    nodes["AggregateFunction_StandardDeviationSample"]->symbolic_name = "AggregateFunction_StandardDeviationSample";
    nodes["AggregateFunction_StandardDeviationPopulation"] = std::make_shared<ua_object>();
    nodes["AggregateFunction_StandardDeviationPopulation"]->node_id = ua_node_id(0, 11427);
    nodes["AggregateFunction_StandardDeviationPopulation"]->browse_name = qualified_name("StandardDeviationPopulation");
    nodes["AggregateFunction_StandardDeviationPopulation"]->symbolic_name = "AggregateFunction_StandardDeviationPopulation";
    nodes["AggregateFunction_VarianceSample"] = std::make_shared<ua_object>();
    nodes["AggregateFunction_VarianceSample"]->node_id = ua_node_id(0, 11428);
    nodes["AggregateFunction_VarianceSample"]->browse_name = qualified_name("VarianceSample");
    nodes["AggregateFunction_VarianceSample"]->symbolic_name = "AggregateFunction_VarianceSample";
    nodes["AggregateFunction_VariancePopulation"] = std::make_shared<ua_object>();
    nodes["AggregateFunction_VariancePopulation"]->node_id = ua_node_id(0, 11429);
    nodes["AggregateFunction_VariancePopulation"]->browse_name = qualified_name("VariancePopulation");
    nodes["AggregateFunction_VariancePopulation"]->symbolic_name = "AggregateFunction_VariancePopulation";
    nodes["DefaultXml"] = std::make_shared<ua_object>();
    nodes["DefaultXml"]->node_id = ua_node_id(0, 12676);
    nodes["DefaultXml"]->browse_name = qualified_name("Default XML");
    nodes["DefaultXml"]->symbolic_name = "DefaultXml";
    nodes["DefaultXml"] = std::make_shared<ua_object>();
    nodes["DefaultXml"]->node_id = ua_node_id(0, 297);
    nodes["DefaultXml"]->browse_name = qualified_name("Default XML");
    nodes["DefaultXml"]->symbolic_name = "DefaultXml";
    nodes["DefaultXml"] = std::make_shared<ua_object>();
    nodes["DefaultXml"]->node_id = ua_node_id(0, 7616);
    nodes["DefaultXml"]->browse_name = qualified_name("Default XML");
    nodes["DefaultXml"]->symbolic_name = "DefaultXml";
    nodes["DefaultXml"] = std::make_shared<ua_object>();
    nodes["DefaultXml"]->node_id = ua_node_id(0, 12757);
    nodes["DefaultXml"]->browse_name = qualified_name("Default XML");
    nodes["DefaultXml"]->symbolic_name = "DefaultXml";
    nodes["DefaultXml"] = std::make_shared<ua_object>();
    nodes["DefaultXml"]->node_id = ua_node_id(0, 12758);
    nodes["DefaultXml"]->browse_name = qualified_name("Default XML");
    nodes["DefaultXml"]->symbolic_name = "DefaultXml";
    nodes["DefaultXml"] = std::make_shared<ua_object>();
    nodes["DefaultXml"]->node_id = ua_node_id(0, 8913);
    nodes["DefaultXml"]->browse_name = qualified_name("Default XML");
    nodes["DefaultXml"]->symbolic_name = "DefaultXml";
    nodes["DefaultXml"] = std::make_shared<ua_object>();
    nodes["DefaultXml"]->node_id = ua_node_id(0, 309);
    nodes["DefaultXml"]->browse_name = qualified_name("Default XML");
    nodes["DefaultXml"]->symbolic_name = "DefaultXml";
    nodes["DefaultXml"] = std::make_shared<ua_object>();
    nodes["DefaultXml"]->node_id = ua_node_id(0, 12195);
    nodes["DefaultXml"]->browse_name = qualified_name("Default XML");
    nodes["DefaultXml"]->symbolic_name = "DefaultXml";
    nodes["DefaultXml"] = std::make_shared<ua_object>();
    nodes["DefaultXml"]->node_id = ua_node_id(0, 305);
    nodes["DefaultXml"]->browse_name = qualified_name("Default XML");
    nodes["DefaultXml"]->symbolic_name = "DefaultXml";
    nodes["DefaultXml"] = std::make_shared<ua_object>();
    nodes["DefaultXml"]->node_id = ua_node_id(0, 313);
    nodes["DefaultXml"]->browse_name = qualified_name("Default XML");
    nodes["DefaultXml"]->symbolic_name = "DefaultXml";
    nodes["DefaultXml"] = std::make_shared<ua_object>();
    nodes["DefaultXml"]->node_id = ua_node_id(0, 433);
    nodes["DefaultXml"]->browse_name = qualified_name("Default XML");
    nodes["DefaultXml"]->symbolic_name = "DefaultXml";
    nodes["DefaultXml"] = std::make_shared<ua_object>();
    nodes["DefaultXml"]->node_id = ua_node_id(0, 12892);
    nodes["DefaultXml"]->browse_name = qualified_name("Default XML");
    nodes["DefaultXml"]->symbolic_name = "DefaultXml";
    nodes["DefaultXml"] = std::make_shared<ua_object>();
    nodes["DefaultXml"]->node_id = ua_node_id(0, 12893);
    nodes["DefaultXml"]->browse_name = qualified_name("Default XML");
    nodes["DefaultXml"]->symbolic_name = "DefaultXml";
    nodes["DefaultXml"] = std::make_shared<ua_object>();
    nodes["DefaultXml"]->node_id = ua_node_id(0, 345);
    nodes["DefaultXml"]->browse_name = qualified_name("Default XML");
    nodes["DefaultXml"]->symbolic_name = "DefaultXml";
    nodes["DefaultXml"] = std::make_shared<ua_object>();
    nodes["DefaultXml"]->node_id = ua_node_id(0, 317);
    nodes["DefaultXml"]->browse_name = qualified_name("Default XML");
    nodes["DefaultXml"]->symbolic_name = "DefaultXml";
    nodes["DefaultXml"] = std::make_shared<ua_object>();
    nodes["DefaultXml"]->node_id = ua_node_id(0, 320);
    nodes["DefaultXml"]->browse_name = qualified_name("Default XML");
    nodes["DefaultXml"]->symbolic_name = "DefaultXml";
    nodes["DefaultXml"] = std::make_shared<ua_object>();
    nodes["DefaultXml"]->node_id = ua_node_id(0, 323);
    nodes["DefaultXml"]->browse_name = qualified_name("Default XML");
    nodes["DefaultXml"]->symbolic_name = "DefaultXml";
    nodes["DefaultXml"] = std::make_shared<ua_object>();
    nodes["DefaultXml"]->node_id = ua_node_id(0, 326);
    nodes["DefaultXml"]->browse_name = qualified_name("Default XML");
    nodes["DefaultXml"]->symbolic_name = "DefaultXml";
    nodes["DefaultXml"] = std::make_shared<ua_object>();
    nodes["DefaultXml"]->node_id = ua_node_id(0, 939);
    nodes["DefaultXml"]->browse_name = qualified_name("Default XML");
    nodes["DefaultXml"]->symbolic_name = "DefaultXml";
    nodes["DefaultXml"] = std::make_shared<ua_object>();
    nodes["DefaultXml"]->node_id = ua_node_id(0, 377);
    nodes["DefaultXml"]->browse_name = qualified_name("Default XML");
    nodes["DefaultXml"]->symbolic_name = "DefaultXml";
    nodes["DefaultXml"] = std::make_shared<ua_object>();
    nodes["DefaultXml"]->node_id = ua_node_id(0, 380);
    nodes["DefaultXml"]->browse_name = qualified_name("Default XML");
    nodes["DefaultXml"]->symbolic_name = "DefaultXml";
    nodes["DefaultXml"] = std::make_shared<ua_object>();
    nodes["DefaultXml"]->node_id = ua_node_id(0, 383);
    nodes["DefaultXml"]->browse_name = qualified_name("Default XML");
    nodes["DefaultXml"]->symbolic_name = "DefaultXml";
    nodes["DefaultXml"] = std::make_shared<ua_object>();
    nodes["DefaultXml"]->node_id = ua_node_id(0, 386);
    nodes["DefaultXml"]->browse_name = qualified_name("Default XML");
    nodes["DefaultXml"]->symbolic_name = "DefaultXml";
    nodes["DefaultXml"] = std::make_shared<ua_object>();
    nodes["DefaultXml"]->node_id = ua_node_id(0, 538);
    nodes["DefaultXml"]->browse_name = qualified_name("Default XML");
    nodes["DefaultXml"]->symbolic_name = "DefaultXml";
    nodes["DefaultXml"] = std::make_shared<ua_object>();
    nodes["DefaultXml"]->node_id = ua_node_id(0, 541);
    nodes["DefaultXml"]->browse_name = qualified_name("Default XML");
    nodes["DefaultXml"]->symbolic_name = "DefaultXml";
    nodes["DefaultXml"] = std::make_shared<ua_object>();
    nodes["DefaultXml"]->node_id = ua_node_id(0, 332);
    nodes["DefaultXml"]->browse_name = qualified_name("Default XML");
    nodes["DefaultXml"]->symbolic_name = "DefaultXml";
    nodes["DefaultXml"] = std::make_shared<ua_object>();
    nodes["DefaultXml"]->node_id = ua_node_id(0, 584);
    nodes["DefaultXml"]->browse_name = qualified_name("Default XML");
    nodes["DefaultXml"]->symbolic_name = "DefaultXml";
    nodes["DefaultXml"] = std::make_shared<ua_object>();
    nodes["DefaultXml"]->node_id = ua_node_id(0, 587);
    nodes["DefaultXml"]->browse_name = qualified_name("Default XML");
    nodes["DefaultXml"]->symbolic_name = "DefaultXml";
    nodes["DefaultXml"] = std::make_shared<ua_object>();
    nodes["DefaultXml"]->node_id = ua_node_id(0, 590);
    nodes["DefaultXml"]->browse_name = qualified_name("Default XML");
    nodes["DefaultXml"]->symbolic_name = "DefaultXml";
    nodes["DefaultXml"] = std::make_shared<ua_object>();
    nodes["DefaultXml"]->node_id = ua_node_id(0, 593);
    nodes["DefaultXml"]->browse_name = qualified_name("Default XML");
    nodes["DefaultXml"]->symbolic_name = "DefaultXml";
    nodes["DefaultXml"] = std::make_shared<ua_object>();
    nodes["DefaultXml"]->node_id = ua_node_id(0, 596);
    nodes["DefaultXml"]->browse_name = qualified_name("Default XML");
    nodes["DefaultXml"]->symbolic_name = "DefaultXml";
    nodes["DefaultXml"] = std::make_shared<ua_object>();
    nodes["DefaultXml"]->node_id = ua_node_id(0, 599);
    nodes["DefaultXml"]->browse_name = qualified_name("Default XML");
    nodes["DefaultXml"]->symbolic_name = "DefaultXml";
    nodes["DefaultXml"] = std::make_shared<ua_object>();
    nodes["DefaultXml"]->node_id = ua_node_id(0, 602);
    nodes["DefaultXml"]->browse_name = qualified_name("Default XML");
    nodes["DefaultXml"]->symbolic_name = "DefaultXml";
    nodes["DefaultXml"] = std::make_shared<ua_object>();
    nodes["DefaultXml"]->node_id = ua_node_id(0, 660);
    nodes["DefaultXml"]->browse_name = qualified_name("Default XML");
    nodes["DefaultXml"]->symbolic_name = "DefaultXml";
    nodes["DefaultXml"] = std::make_shared<ua_object>();
    nodes["DefaultXml"]->node_id = ua_node_id(0, 720);
    nodes["DefaultXml"]->browse_name = qualified_name("Default XML");
    nodes["DefaultXml"]->symbolic_name = "DefaultXml";
    nodes["DefaultXml"] = std::make_shared<ua_object>();
    nodes["DefaultXml"]->node_id = ua_node_id(0, 726);
    nodes["DefaultXml"]->browse_name = qualified_name("Default XML");
    nodes["DefaultXml"]->symbolic_name = "DefaultXml";
    nodes["DefaultXml"] = std::make_shared<ua_object>();
    nodes["DefaultXml"]->node_id = ua_node_id(0, 949);
    nodes["DefaultXml"]->browse_name = qualified_name("Default XML");
    nodes["DefaultXml"]->symbolic_name = "DefaultXml";
    nodes["DefaultXml"] = std::make_shared<ua_object>();
    nodes["DefaultXml"]->node_id = ua_node_id(0, 921);
    nodes["DefaultXml"]->browse_name = qualified_name("Default XML");
    nodes["DefaultXml"]->symbolic_name = "DefaultXml";
    nodes["DefaultXml"] = std::make_shared<ua_object>();
    nodes["DefaultXml"]->node_id = ua_node_id(0, 339);
    nodes["DefaultXml"]->browse_name = qualified_name("Default XML");
    nodes["DefaultXml"]->symbolic_name = "DefaultXml";
    nodes["DefaultXml"] = std::make_shared<ua_object>();
    nodes["DefaultXml"]->node_id = ua_node_id(0, 854);
    nodes["DefaultXml"]->browse_name = qualified_name("Default XML");
    nodes["DefaultXml"]->symbolic_name = "DefaultXml";
    nodes["DefaultXml"] = std::make_shared<ua_object>();
    nodes["DefaultXml"]->node_id = ua_node_id(0, 11949);
    nodes["DefaultXml"]->browse_name = qualified_name("Default XML");
    nodes["DefaultXml"]->symbolic_name = "DefaultXml";
    nodes["DefaultXml"] = std::make_shared<ua_object>();
    nodes["DefaultXml"]->node_id = ua_node_id(0, 11950);
    nodes["DefaultXml"]->browse_name = qualified_name("Default XML");
    nodes["DefaultXml"]->symbolic_name = "DefaultXml";
    nodes["DefaultXml"] = std::make_shared<ua_object>();
    nodes["DefaultXml"]->node_id = ua_node_id(0, 857);
    nodes["DefaultXml"]->browse_name = qualified_name("Default XML");
    nodes["DefaultXml"]->symbolic_name = "DefaultXml";
    nodes["DefaultXml"] = std::make_shared<ua_object>();
    nodes["DefaultXml"]->node_id = ua_node_id(0, 860);
    nodes["DefaultXml"]->browse_name = qualified_name("Default XML");
    nodes["DefaultXml"]->symbolic_name = "DefaultXml";
    nodes["DefaultXml"] = std::make_shared<ua_object>();
    nodes["DefaultXml"]->node_id = ua_node_id(0, 863);
    nodes["DefaultXml"]->browse_name = qualified_name("Default XML");
    nodes["DefaultXml"]->symbolic_name = "DefaultXml";
    nodes["DefaultXml"] = std::make_shared<ua_object>();
    nodes["DefaultXml"]->node_id = ua_node_id(0, 866);
    nodes["DefaultXml"]->browse_name = qualified_name("Default XML");
    nodes["DefaultXml"]->symbolic_name = "DefaultXml";
    nodes["DefaultXml"] = std::make_shared<ua_object>();
    nodes["DefaultXml"]->node_id = ua_node_id(0, 869);
    nodes["DefaultXml"]->browse_name = qualified_name("Default XML");
    nodes["DefaultXml"]->symbolic_name = "DefaultXml";
    nodes["DefaultXml"] = std::make_shared<ua_object>();
    nodes["DefaultXml"]->node_id = ua_node_id(0, 872);
    nodes["DefaultXml"]->browse_name = qualified_name("Default XML");
    nodes["DefaultXml"]->symbolic_name = "DefaultXml";
    nodes["DefaultXml"] = std::make_shared<ua_object>();
    nodes["DefaultXml"]->node_id = ua_node_id(0, 300);
    nodes["DefaultXml"]->browse_name = qualified_name("Default XML");
    nodes["DefaultXml"]->symbolic_name = "DefaultXml";
    nodes["DefaultXml"] = std::make_shared<ua_object>();
    nodes["DefaultXml"]->node_id = ua_node_id(0, 875);
    nodes["DefaultXml"]->browse_name = qualified_name("Default XML");
    nodes["DefaultXml"]->symbolic_name = "DefaultXml";
    nodes["DefaultXml"] = std::make_shared<ua_object>();
    nodes["DefaultXml"]->node_id = ua_node_id(0, 878);
    nodes["DefaultXml"]->browse_name = qualified_name("Default XML");
    nodes["DefaultXml"]->symbolic_name = "DefaultXml";
    nodes["DefaultXml"] = std::make_shared<ua_object>();
    nodes["DefaultXml"]->node_id = ua_node_id(0, 898);
    nodes["DefaultXml"]->browse_name = qualified_name("Default XML");
    nodes["DefaultXml"]->symbolic_name = "DefaultXml";
    nodes["DefaultXml"] = std::make_shared<ua_object>();
    nodes["DefaultXml"]->node_id = ua_node_id(0, 885);
    nodes["DefaultXml"]->browse_name = qualified_name("Default XML");
    nodes["DefaultXml"]->symbolic_name = "DefaultXml";
    nodes["DefaultXml"] = std::make_shared<ua_object>();
    nodes["DefaultXml"]->node_id = ua_node_id(0, 888);
    nodes["DefaultXml"]->browse_name = qualified_name("Default XML");
    nodes["DefaultXml"]->symbolic_name = "DefaultXml";
    nodes["DefaultXml"] = std::make_shared<ua_object>();
    nodes["DefaultXml"]->node_id = ua_node_id(0, 12173);
    nodes["DefaultXml"]->browse_name = qualified_name("Default XML");
    nodes["DefaultXml"]->symbolic_name = "DefaultXml";
    nodes["DefaultXml"] = std::make_shared<ua_object>();
    nodes["DefaultXml"]->node_id = ua_node_id(0, 12174);
    nodes["DefaultXml"]->browse_name = qualified_name("Default XML");
    nodes["DefaultXml"]->symbolic_name = "DefaultXml";
    nodes["DefaultXml"] = std::make_shared<ua_object>();
    nodes["DefaultXml"]->node_id = ua_node_id(0, 12081);
    nodes["DefaultXml"]->browse_name = qualified_name("Default XML");
    nodes["DefaultXml"]->symbolic_name = "DefaultXml";
    nodes["DefaultXml"] = std::make_shared<ua_object>();
    nodes["DefaultXml"]->node_id = ua_node_id(0, 12082);
    nodes["DefaultXml"]->browse_name = qualified_name("Default XML");
    nodes["DefaultXml"]->symbolic_name = "DefaultXml";
    nodes["DefaultXml"] = std::make_shared<ua_object>();
    nodes["DefaultXml"]->node_id = ua_node_id(0, 895);
    nodes["DefaultXml"]->browse_name = qualified_name("Default XML");
    nodes["DefaultXml"]->symbolic_name = "DefaultXml";
    nodes["DefaultXml"] = std::make_shared<ua_object>();
    nodes["DefaultXml"]->node_id = ua_node_id(0, 892);
    nodes["DefaultXml"]->browse_name = qualified_name("Default XML");
    nodes["DefaultXml"]->symbolic_name = "DefaultXml";
    nodes["DefaultBinary"] = std::make_shared<ua_object>();
    nodes["DefaultBinary"]->node_id = ua_node_id(0, 12680);
    nodes["DefaultBinary"]->browse_name = qualified_name("Default Binary");
    nodes["DefaultBinary"]->symbolic_name = "DefaultBinary";
    nodes["DefaultBinary"] = std::make_shared<ua_object>();
    nodes["DefaultBinary"]->node_id = ua_node_id(0, 298);
    nodes["DefaultBinary"]->browse_name = qualified_name("Default Binary");
    nodes["DefaultBinary"]->symbolic_name = "DefaultBinary";
    nodes["DefaultBinary"] = std::make_shared<ua_object>();
    nodes["DefaultBinary"]->node_id = ua_node_id(0, 8251);
    nodes["DefaultBinary"]->browse_name = qualified_name("Default Binary");
    nodes["DefaultBinary"]->symbolic_name = "DefaultBinary";
    nodes["DefaultBinary"] = std::make_shared<ua_object>();
    nodes["DefaultBinary"]->node_id = ua_node_id(0, 12765);
    nodes["DefaultBinary"]->browse_name = qualified_name("Default Binary");
    nodes["DefaultBinary"]->symbolic_name = "DefaultBinary";
    nodes["DefaultBinary"] = std::make_shared<ua_object>();
    nodes["DefaultBinary"]->node_id = ua_node_id(0, 12766);
    nodes["DefaultBinary"]->browse_name = qualified_name("Default Binary");
    nodes["DefaultBinary"]->symbolic_name = "DefaultBinary";
    nodes["DefaultBinary"] = std::make_shared<ua_object>();
    nodes["DefaultBinary"]->node_id = ua_node_id(0, 8917);
    nodes["DefaultBinary"]->browse_name = qualified_name("Default Binary");
    nodes["DefaultBinary"]->symbolic_name = "DefaultBinary";
    nodes["DefaultBinary"] = std::make_shared<ua_object>();
    nodes["DefaultBinary"]->node_id = ua_node_id(0, 310);
    nodes["DefaultBinary"]->browse_name = qualified_name("Default Binary");
    nodes["DefaultBinary"]->symbolic_name = "DefaultBinary";
    nodes["DefaultBinary"] = std::make_shared<ua_object>();
    nodes["DefaultBinary"]->node_id = ua_node_id(0, 12207);
    nodes["DefaultBinary"]->browse_name = qualified_name("Default Binary");
    nodes["DefaultBinary"]->symbolic_name = "DefaultBinary";
    nodes["DefaultBinary"] = std::make_shared<ua_object>();
    nodes["DefaultBinary"]->node_id = ua_node_id(0, 306);
    nodes["DefaultBinary"]->browse_name = qualified_name("Default Binary");
    nodes["DefaultBinary"]->symbolic_name = "DefaultBinary";
    nodes["DefaultBinary"] = std::make_shared<ua_object>();
    nodes["DefaultBinary"]->node_id = ua_node_id(0, 314);
    nodes["DefaultBinary"]->browse_name = qualified_name("Default Binary");
    nodes["DefaultBinary"]->symbolic_name = "DefaultBinary";
    nodes["DefaultBinary"] = std::make_shared<ua_object>();
    nodes["DefaultBinary"]->node_id = ua_node_id(0, 434);
    nodes["DefaultBinary"]->browse_name = qualified_name("Default Binary");
    nodes["DefaultBinary"]->symbolic_name = "DefaultBinary";
    nodes["DefaultBinary"] = std::make_shared<ua_object>();
    nodes["DefaultBinary"]->node_id = ua_node_id(0, 12900);
    nodes["DefaultBinary"]->browse_name = qualified_name("Default Binary");
    nodes["DefaultBinary"]->symbolic_name = "DefaultBinary";
    nodes["DefaultBinary"] = std::make_shared<ua_object>();
    nodes["DefaultBinary"]->node_id = ua_node_id(0, 12901);
    nodes["DefaultBinary"]->browse_name = qualified_name("Default Binary");
    nodes["DefaultBinary"]->symbolic_name = "DefaultBinary";
    nodes["DefaultBinary"] = std::make_shared<ua_object>();
    nodes["DefaultBinary"]->node_id = ua_node_id(0, 346);
    nodes["DefaultBinary"]->browse_name = qualified_name("Default Binary");
    nodes["DefaultBinary"]->symbolic_name = "DefaultBinary";
    nodes["DefaultBinary"] = std::make_shared<ua_object>();
    nodes["DefaultBinary"]->node_id = ua_node_id(0, 318);
    nodes["DefaultBinary"]->browse_name = qualified_name("Default Binary");
    nodes["DefaultBinary"]->symbolic_name = "DefaultBinary";
    nodes["DefaultBinary"] = std::make_shared<ua_object>();
    nodes["DefaultBinary"]->node_id = ua_node_id(0, 321);
    nodes["DefaultBinary"]->browse_name = qualified_name("Default Binary");
    nodes["DefaultBinary"]->symbolic_name = "DefaultBinary";
    nodes["DefaultBinary"] = std::make_shared<ua_object>();
    nodes["DefaultBinary"]->node_id = ua_node_id(0, 324);
    nodes["DefaultBinary"]->browse_name = qualified_name("Default Binary");
    nodes["DefaultBinary"]->symbolic_name = "DefaultBinary";
    nodes["DefaultBinary"] = std::make_shared<ua_object>();
    nodes["DefaultBinary"]->node_id = ua_node_id(0, 327);
    nodes["DefaultBinary"]->browse_name = qualified_name("Default Binary");
    nodes["DefaultBinary"]->symbolic_name = "DefaultBinary";
    nodes["DefaultBinary"] = std::make_shared<ua_object>();
    nodes["DefaultBinary"]->node_id = ua_node_id(0, 940);
    nodes["DefaultBinary"]->browse_name = qualified_name("Default Binary");
    nodes["DefaultBinary"]->symbolic_name = "DefaultBinary";
    nodes["DefaultBinary"] = std::make_shared<ua_object>();
    nodes["DefaultBinary"]->node_id = ua_node_id(0, 378);
    nodes["DefaultBinary"]->browse_name = qualified_name("Default Binary");
    nodes["DefaultBinary"]->symbolic_name = "DefaultBinary";
    nodes["DefaultBinary"] = std::make_shared<ua_object>();
    nodes["DefaultBinary"]->node_id = ua_node_id(0, 381);
    nodes["DefaultBinary"]->browse_name = qualified_name("Default Binary");
    nodes["DefaultBinary"]->symbolic_name = "DefaultBinary";
    nodes["DefaultBinary"] = std::make_shared<ua_object>();
    nodes["DefaultBinary"]->node_id = ua_node_id(0, 384);
    nodes["DefaultBinary"]->browse_name = qualified_name("Default Binary");
    nodes["DefaultBinary"]->symbolic_name = "DefaultBinary";
    nodes["DefaultBinary"] = std::make_shared<ua_object>();
    nodes["DefaultBinary"]->node_id = ua_node_id(0, 387);
    nodes["DefaultBinary"]->browse_name = qualified_name("Default Binary");
    nodes["DefaultBinary"]->symbolic_name = "DefaultBinary";
    nodes["DefaultBinary"] = std::make_shared<ua_object>();
    nodes["DefaultBinary"]->node_id = ua_node_id(0, 539);
    nodes["DefaultBinary"]->browse_name = qualified_name("Default Binary");
    nodes["DefaultBinary"]->symbolic_name = "DefaultBinary";
    nodes["DefaultBinary"] = std::make_shared<ua_object>();
    nodes["DefaultBinary"]->node_id = ua_node_id(0, 542);
    nodes["DefaultBinary"]->browse_name = qualified_name("Default Binary");
    nodes["DefaultBinary"]->symbolic_name = "DefaultBinary";
    nodes["DefaultBinary"] = std::make_shared<ua_object>();
    nodes["DefaultBinary"]->node_id = ua_node_id(0, 333);
    nodes["DefaultBinary"]->browse_name = qualified_name("Default Binary");
    nodes["DefaultBinary"]->symbolic_name = "DefaultBinary";
    nodes["DefaultBinary"] = std::make_shared<ua_object>();
    nodes["DefaultBinary"]->node_id = ua_node_id(0, 585);
    nodes["DefaultBinary"]->browse_name = qualified_name("Default Binary");
    nodes["DefaultBinary"]->symbolic_name = "DefaultBinary";
    nodes["DefaultBinary"] = std::make_shared<ua_object>();
    nodes["DefaultBinary"]->node_id = ua_node_id(0, 588);
    nodes["DefaultBinary"]->browse_name = qualified_name("Default Binary");
    nodes["DefaultBinary"]->symbolic_name = "DefaultBinary";
    nodes["DefaultBinary"] = std::make_shared<ua_object>();
    nodes["DefaultBinary"]->node_id = ua_node_id(0, 591);
    nodes["DefaultBinary"]->browse_name = qualified_name("Default Binary");
    nodes["DefaultBinary"]->symbolic_name = "DefaultBinary";
    nodes["DefaultBinary"] = std::make_shared<ua_object>();
    nodes["DefaultBinary"]->node_id = ua_node_id(0, 594);
    nodes["DefaultBinary"]->browse_name = qualified_name("Default Binary");
    nodes["DefaultBinary"]->symbolic_name = "DefaultBinary";
    nodes["DefaultBinary"] = std::make_shared<ua_object>();
    nodes["DefaultBinary"]->node_id = ua_node_id(0, 597);
    nodes["DefaultBinary"]->browse_name = qualified_name("Default Binary");
    nodes["DefaultBinary"]->symbolic_name = "DefaultBinary";
    nodes["DefaultBinary"] = std::make_shared<ua_object>();
    nodes["DefaultBinary"]->node_id = ua_node_id(0, 600);
    nodes["DefaultBinary"]->browse_name = qualified_name("Default Binary");
    nodes["DefaultBinary"]->symbolic_name = "DefaultBinary";
    nodes["DefaultBinary"] = std::make_shared<ua_object>();
    nodes["DefaultBinary"]->node_id = ua_node_id(0, 603);
    nodes["DefaultBinary"]->browse_name = qualified_name("Default Binary");
    nodes["DefaultBinary"]->symbolic_name = "DefaultBinary";
    nodes["DefaultBinary"] = std::make_shared<ua_object>();
    nodes["DefaultBinary"]->node_id = ua_node_id(0, 661);
    nodes["DefaultBinary"]->browse_name = qualified_name("Default Binary");
    nodes["DefaultBinary"]->symbolic_name = "DefaultBinary";
    nodes["DefaultBinary"] = std::make_shared<ua_object>();
    nodes["DefaultBinary"]->node_id = ua_node_id(0, 721);
    nodes["DefaultBinary"]->browse_name = qualified_name("Default Binary");
    nodes["DefaultBinary"]->symbolic_name = "DefaultBinary";
    nodes["DefaultBinary"] = std::make_shared<ua_object>();
    nodes["DefaultBinary"]->node_id = ua_node_id(0, 727);
    nodes["DefaultBinary"]->browse_name = qualified_name("Default Binary");
    nodes["DefaultBinary"]->symbolic_name = "DefaultBinary";
    nodes["DefaultBinary"] = std::make_shared<ua_object>();
    nodes["DefaultBinary"]->node_id = ua_node_id(0, 950);
    nodes["DefaultBinary"]->browse_name = qualified_name("Default Binary");
    nodes["DefaultBinary"]->symbolic_name = "DefaultBinary";
    nodes["DefaultBinary"] = std::make_shared<ua_object>();
    nodes["DefaultBinary"]->node_id = ua_node_id(0, 922);
    nodes["DefaultBinary"]->browse_name = qualified_name("Default Binary");
    nodes["DefaultBinary"]->symbolic_name = "DefaultBinary";
    nodes["DefaultBinary"] = std::make_shared<ua_object>();
    nodes["DefaultBinary"]->node_id = ua_node_id(0, 340);
    nodes["DefaultBinary"]->browse_name = qualified_name("Default Binary");
    nodes["DefaultBinary"]->symbolic_name = "DefaultBinary";
    nodes["DefaultBinary"] = std::make_shared<ua_object>();
    nodes["DefaultBinary"]->node_id = ua_node_id(0, 855);
    nodes["DefaultBinary"]->browse_name = qualified_name("Default Binary");
    nodes["DefaultBinary"]->symbolic_name = "DefaultBinary";
    nodes["DefaultBinary"] = std::make_shared<ua_object>();
    nodes["DefaultBinary"]->node_id = ua_node_id(0, 11957);
    nodes["DefaultBinary"]->browse_name = qualified_name("Default Binary");
    nodes["DefaultBinary"]->symbolic_name = "DefaultBinary";
    nodes["DefaultBinary"] = std::make_shared<ua_object>();
    nodes["DefaultBinary"]->node_id = ua_node_id(0, 11958);
    nodes["DefaultBinary"]->browse_name = qualified_name("Default Binary");
    nodes["DefaultBinary"]->symbolic_name = "DefaultBinary";
    nodes["DefaultBinary"] = std::make_shared<ua_object>();
    nodes["DefaultBinary"]->node_id = ua_node_id(0, 858);
    nodes["DefaultBinary"]->browse_name = qualified_name("Default Binary");
    nodes["DefaultBinary"]->symbolic_name = "DefaultBinary";
    nodes["DefaultBinary"] = std::make_shared<ua_object>();
    nodes["DefaultBinary"]->node_id = ua_node_id(0, 861);
    nodes["DefaultBinary"]->browse_name = qualified_name("Default Binary");
    nodes["DefaultBinary"]->symbolic_name = "DefaultBinary";
    nodes["DefaultBinary"] = std::make_shared<ua_object>();
    nodes["DefaultBinary"]->node_id = ua_node_id(0, 864);
    nodes["DefaultBinary"]->browse_name = qualified_name("Default Binary");
    nodes["DefaultBinary"]->symbolic_name = "DefaultBinary";
    nodes["DefaultBinary"] = std::make_shared<ua_object>();
    nodes["DefaultBinary"]->node_id = ua_node_id(0, 867);
    nodes["DefaultBinary"]->browse_name = qualified_name("Default Binary");
    nodes["DefaultBinary"]->symbolic_name = "DefaultBinary";
    nodes["DefaultBinary"] = std::make_shared<ua_object>();
    nodes["DefaultBinary"]->node_id = ua_node_id(0, 870);
    nodes["DefaultBinary"]->browse_name = qualified_name("Default Binary");
    nodes["DefaultBinary"]->symbolic_name = "DefaultBinary";
    nodes["DefaultBinary"] = std::make_shared<ua_object>();
    nodes["DefaultBinary"]->node_id = ua_node_id(0, 873);
    nodes["DefaultBinary"]->browse_name = qualified_name("Default Binary");
    nodes["DefaultBinary"]->symbolic_name = "DefaultBinary";
    nodes["DefaultBinary"] = std::make_shared<ua_object>();
    nodes["DefaultBinary"]->node_id = ua_node_id(0, 301);
    nodes["DefaultBinary"]->browse_name = qualified_name("Default Binary");
    nodes["DefaultBinary"]->symbolic_name = "DefaultBinary";
    nodes["DefaultBinary"] = std::make_shared<ua_object>();
    nodes["DefaultBinary"]->node_id = ua_node_id(0, 876);
    nodes["DefaultBinary"]->browse_name = qualified_name("Default Binary");
    nodes["DefaultBinary"]->symbolic_name = "DefaultBinary";
    nodes["DefaultBinary"] = std::make_shared<ua_object>();
    nodes["DefaultBinary"]->node_id = ua_node_id(0, 879);
    nodes["DefaultBinary"]->browse_name = qualified_name("Default Binary");
    nodes["DefaultBinary"]->symbolic_name = "DefaultBinary";
    nodes["DefaultBinary"] = std::make_shared<ua_object>();
    nodes["DefaultBinary"]->node_id = ua_node_id(0, 899);
    nodes["DefaultBinary"]->browse_name = qualified_name("Default Binary");
    nodes["DefaultBinary"]->symbolic_name = "DefaultBinary";
    nodes["DefaultBinary"] = std::make_shared<ua_object>();
    nodes["DefaultBinary"]->node_id = ua_node_id(0, 886);
    nodes["DefaultBinary"]->browse_name = qualified_name("Default Binary");
    nodes["DefaultBinary"]->symbolic_name = "DefaultBinary";
    nodes["DefaultBinary"] = std::make_shared<ua_object>();
    nodes["DefaultBinary"]->node_id = ua_node_id(0, 889);
    nodes["DefaultBinary"]->browse_name = qualified_name("Default Binary");
    nodes["DefaultBinary"]->symbolic_name = "DefaultBinary";
    nodes["DefaultBinary"] = std::make_shared<ua_object>();
    nodes["DefaultBinary"]->node_id = ua_node_id(0, 12181);
    nodes["DefaultBinary"]->browse_name = qualified_name("Default Binary");
    nodes["DefaultBinary"]->symbolic_name = "DefaultBinary";
    nodes["DefaultBinary"] = std::make_shared<ua_object>();
    nodes["DefaultBinary"]->node_id = ua_node_id(0, 12182);
    nodes["DefaultBinary"]->browse_name = qualified_name("Default Binary");
    nodes["DefaultBinary"]->symbolic_name = "DefaultBinary";
    nodes["DefaultBinary"] = std::make_shared<ua_object>();
    nodes["DefaultBinary"]->node_id = ua_node_id(0, 12089);
    nodes["DefaultBinary"]->browse_name = qualified_name("Default Binary");
    nodes["DefaultBinary"]->symbolic_name = "DefaultBinary";
    nodes["DefaultBinary"] = std::make_shared<ua_object>();
    nodes["DefaultBinary"]->node_id = ua_node_id(0, 12090);
    nodes["DefaultBinary"]->browse_name = qualified_name("Default Binary");
    nodes["DefaultBinary"]->symbolic_name = "DefaultBinary";
    nodes["DefaultBinary"] = std::make_shared<ua_object>();
    nodes["DefaultBinary"]->node_id = ua_node_id(0, 896);
    nodes["DefaultBinary"]->browse_name = qualified_name("Default Binary");
    nodes["DefaultBinary"]->symbolic_name = "DefaultBinary";
    nodes["DefaultBinary"] = std::make_shared<ua_object>();
    nodes["DefaultBinary"]->node_id = ua_node_id(0, 893);
    nodes["DefaultBinary"]->browse_name = qualified_name("Default Binary");
    nodes["DefaultBinary"]->symbolic_name = "DefaultBinary";
}
